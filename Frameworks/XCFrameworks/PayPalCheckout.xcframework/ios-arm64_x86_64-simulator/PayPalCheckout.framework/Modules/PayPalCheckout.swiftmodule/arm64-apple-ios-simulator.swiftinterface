// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PayPalCheckout
import AuthenticationServices
import CoreGraphics
import Foundation
import ObjectiveC
import SafariServices
import Swift
import UIKit
import WebKit
@objc(PPCPaymentButtonEdges) public enum PaymentButtonEdges : Swift.Int, Swift.CaseIterable, Swift.CustomStringConvertible {
  case hardEdges
  case softEdges
  case rounded
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PayPalCheckout.PaymentButtonEdges]
  public typealias RawValue = Swift.Int
  public static var allCases: [PayPalCheckout.PaymentButtonEdges] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(PPCPaymentButtonAttributes) @objcMembers public class PaymentButtonAttributes : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public init(edges: PayPalCheckout.PaymentButtonEdges = .hardEdges, size: PayPalCheckout.PaymentButtonSize = .collapsed, isEnabled: Swift.Bool = true)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OutboundNetworkStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.OutboundNetworkStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
@_hasMissingDesignatedInitializers @objc(PPCOrderActionData) @objcMembers public class OrderActionData : ObjectiveC.NSObject {
  @objc final public let id: Swift.String
  @objc final public let status: Swift.String
  @objc final public let orderData: [Swift.String : Any]
  @objc deinit
  @objc override dynamic public init()
}
@objc(PPCShippingChangeState) public enum ShippingChangeState : Swift.Int, Swift.Codable {
  case processing
  case approved
  case error
  case undetermined
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RateProtectionInfoPage : PayPalCheckout.ContentPage {
  override public var headerAccessibilityElements: [Any]? {
    get
  }
  @objc deinit
}
@available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
public protocol PaymentButtonProvider : AnyObject {
  var view: PayPalCheckout.PaymentButton? { get set }
  func start()
}
public typealias EventID = Swift.String
public typealias EventListener = (PayPalCheckout.EventTypeData, Swift.Error?) -> Swift.Void
public enum EventPlayback : Swift.CaseIterable {
  case all
  case last
  case successful
  case lastSuccessful
  case failures
  case none
  public static func == (a: PayPalCheckout.EventPlayback, b: PayPalCheckout.EventPlayback) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PayPalCheckout.EventPlayback]
  public static var allCases: [PayPalCheckout.EventPlayback] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Events {
  @objc deinit
  public static func listen(to type: PayPalCheckout.EventType, id: PayPalCheckout.EventID, playback: PayPalCheckout.EventPlayback = .lastSuccessful, listener: @escaping PayPalCheckout.EventListener)
}
public struct GQLAddAddressPayload : PayPalCheckout.UserCheckoutPayload, Swift.Equatable, Swift.Codable {
  public var user: PayPalCheckout.User? {
    get
  }
  public var session: PayPalCheckout.CheckoutSession {
    get
  }
  public static func == (a: PayPalCheckout.GQLAddAddressPayload, b: PayPalCheckout.GQLAddAddressPayload) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol UserCheckoutPayload {
  var user: PayPalCheckout.User? { get }
  var session: PayPalCheckout.CheckoutSession { get }
}
public struct UserCheckoutResult : Swift.Decodable, Swift.Equatable {
  public var payload: PayPalCheckout.UserCheckoutPayload {
    get
  }
  public var isBillingAgreement: Swift.Bool {
    get
  }
  public var hasNoAvailableFI: Swift.Bool {
    get
  }
  public var hasNoAvailableShipping: Swift.Bool {
    get
  }
  public var threeDSContingencies: PayPalCheckout.ThreeDomainSecureResolutionContingency? {
    get
  }
  public var scaContextID: Swift.String? {
    get
  }
  public var unsupportedContingencies: [Swift.String] {
    get
  }
  public var errorMessage: Swift.String {
    get
  }
  public var hasErrors: Swift.Bool {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: PayPalCheckout.UserCheckoutResult, b: PayPalCheckout.UserCheckoutResult) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objc(PPCPaymentFundingEligibilityState) @objcMembers public class PaymentFundingEligibilityState : ObjectiveC.NSObject {
  public typealias PaymentsButtonState = [PayPalCheckout.PaymentButtonFundingSource : [Swift.String : Swift.AnyObject]]
  final public let paymentsButton: PayPalCheckout.PaymentFundingEligibilityState.PaymentsButtonState
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers public class InitializeUIStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.InitializeUIStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CartDetailsView : UIKit.UIView, PayPalCheckout.ContentView {
  public var isVisible: Swift.Bool
  public func desiredHeight(forWidth availableWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  public var customizeView: (() -> Swift.Void)?
  @objc deinit
  public func willChangeHeight(with update: PayPalCheckout.PageHeightUpdate)
  public func didChangeHeight(with update: PayPalCheckout.PageHeightUpdate)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DeliveryView : UIKit.UIView, PayPalCheckout.ContentView, PayPalCheckout.ViewModelView, PayPalCheckout.ActionableRow {
  public func desiredHeight(forWidth availableWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  public var isVisible: Swift.Bool {
    get
  }
  public var isPaysheetRow: Swift.Bool {
    get
  }
  @objc deinit
  public func updateData()
  public func didSelectRow()
  public func willChangeHeight(with update: PayPalCheckout.PageHeightUpdate)
  public func didChangeHeight(with update: PayPalCheckout.PageHeightUpdate)
}
@_hasMissingDesignatedInitializers public class MoveToFinishingPage : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.MoveToFinishingPage.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
@_hasMissingDesignatedInitializers public class CryptoRequestStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.CryptoRequestStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
public typealias StaticIdentifier = Swift.String
public protocol StaticIdentifiable {
  static var id: PayPalCheckout.StaticIdentifier { get }
  var staticId: PayPalCheckout.StaticIdentifier { get }
}
extension StaticIdentifiable {
  public static var id: PayPalCheckout.StaticIdentifier {
    get
  }
  public var staticId: PayPalCheckout.StaticIdentifier {
    get
  }
}
public func == (lhs: PayPalCheckout.StaticIdentifiable, rhs: PayPalCheckout.StaticIdentifiable) -> Swift.Bool
public func != (lhs: PayPalCheckout.StaticIdentifiable, rhs: PayPalCheckout.StaticIdentifiable) -> Swift.Bool
@_hasMissingDesignatedInitializers public class AuthenticateStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.AuthenticateStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
@objc(PPCShippingChangeAddress) @objcMembers final public class ShippingChangeAddress : ObjectiveC.NSObject {
  @objc final public var addressID: Swift.String? {
    get
  }
  @objc final public var fullName: Swift.String? {
    get
  }
  @objc final public var city: Swift.String? {
    get
  }
  @objc final public var state: Swift.String? {
    get
  }
  @objc final public var postalCode: Swift.String? {
    get
  }
  @objc final public var country: Swift.String? {
    get
  }
  @objc public init(addressID: Swift.String? = nil, fullName: Swift.String? = nil, city: Swift.String? = nil, state: Swift.String? = nil, postalCode: Swift.String? = nil, country: Swift.String? = nil)
  @objc deinit
  @objc override dynamic public init()
}
public protocol Suggestion {
  var id: Swift.String { get }
  var suggestionImageName: Swift.String? { get }
  var mainText: Swift.String { get }
  var secondaryText: Swift.String? { get }
  var isSelected: Swift.Bool { get }
}
@_hasMissingDesignatedInitializers public class SDKEligibilityStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.SDKEligibilityStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
@objc(PPCPayPalPayLaterButton) public class PayPalPayLaterButton : PayPalCheckout.PaymentButton {
  @objc(PPCPayPalPayLaterButtonColor) public enum Color : Swift.Int, Swift.CaseIterable {
    case gold = 0
    case white = 1
    case black = 2
    case silver = 3
    case blue = 4
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [PayPalCheckout.PayPalPayLaterButton.Color]
    public typealias RawValue = Swift.Int
    public static var allCases: [PayPalCheckout.PayPalPayLaterButton.Color] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc @available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
  convenience public init(insets: UIKit.NSDirectionalEdgeInsets, color: PayPalCheckout.PayPalPayLaterButton.Color = .gold, edges: PayPalCheckout.PaymentButtonEdges = .softEdges, size: PayPalCheckout.PaymentButtonSize = .collapsed, isEnabled: Swift.Bool = true)
  @objc @available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
  convenience public init(color: PayPalCheckout.PayPalPayLaterButton.Color = .gold, edges: PayPalCheckout.PaymentButtonEdges = .softEdges, size: PayPalCheckout.PaymentButtonSize = .collapsed, isEnabled: Swift.Bool = true)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UnconstrainedTextLabel : UIKit.UILabel, PayPalCheckout.ContentView {
  public func desiredHeight(forWidth availableWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  public var contentConstraints: PayPalCheckout.ContentConstrainer {
    get
  }
  public func setLabelText(_ content: Swift.String, _ args: [Swift.String] = [])
  public func setLabelText(_ content: Swift.String, _ args: Swift.String...)
  convenience public init(_ content: Swift.String, _ args: Swift.String...)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum BackgroundConfig : Swift.Comparable {
  case all(backgrounds: [PayPalCheckout.Background])
  case page(id: PayPalCheckout.StaticIdentifier, backgrounds: [PayPalCheckout.Background])
  public static func < (lhs: PayPalCheckout.BackgroundConfig, rhs: PayPalCheckout.BackgroundConfig) -> Swift.Bool
  public static func == (a: PayPalCheckout.BackgroundConfig, b: PayPalCheckout.BackgroundConfig) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objc(PPCUnitAmount) @objcMembers public class UnitAmount : ObjectiveC.NSObject, Swift.Codable, Swift.Comparable {
  @objc final public let value: Swift.String?
  public var currencyCode: PayPalCheckout.CurrencyCode? {
    get
  }
  @objc final public let currencyCodeString: Swift.String?
  @objc final public let currencyFormat: Swift.String?
  @objc public init(currencyCode: PayPalCheckout.CurrencyCode, value: Swift.String)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func < (lhs: PayPalCheckout.UnitAmount, rhs: PayPalCheckout.UnitAmount) -> Swift.Bool
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
extension Optional : Swift.Comparable where Wrapped == PayPalCheckout.UnitAmount {
  public static func < (lhs: PayPalCheckout.UnitAmount?, rhs: PayPalCheckout.UnitAmount?) -> Swift.Bool
}
public struct ButtonState {
  public typealias Action = (PayPalCheckout.ButtonState) -> Swift.Void
  public enum Color {
    case blue
    case blueBorderOnly
    public static func == (a: PayPalCheckout.ButtonState.Color, b: PayPalCheckout.ButtonState.Color) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var text: Swift.String
  public var color: PayPalCheckout.ButtonState.Color
  public var isVisible: Swift.Bool
  public var action: PayPalCheckout.ButtonState.Action
  public init(text: Swift.String, color: PayPalCheckout.ButtonState.Color, isVisible: Swift.Bool = true, action: @escaping PayPalCheckout.ButtonState.Action)
}
public struct SCAStepUpResponse {
  public let accessToken: Swift.String?
  public let idToken: Swift.String?
  public let error: Swift.Error?
  public init(accessToken: Swift.String?, idToken: Swift.String?, error: Swift.Error?)
}
public enum TextInputState {
  case normal
  case normalFocused
  case error
  case errorFocused
  case success
  case successFocused
  public static func == (a: PayPalCheckout.TextInputState, b: PayPalCheckout.TextInputState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class DismissPaysheetStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.DismissPaysheetStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
public typealias ColorSheet = [PayPalCheckout.ColorType : UIKit.UIColor]
extension Dictionary where Key == PayPalCheckout.ColorType, Value == UIKit.UIColor {
  public func color(for type: PayPalCheckout.ColorType) -> UIKit.UIColor
  public mutating func update(type: PayPalCheckout.ColorType, with color: UIKit.UIColor)
}
@_inheritsConvenienceInitializers @objc(PPCPayPalButtonUIConfiguration) @objcMembers public class PayPalButtonUIConfiguration : ObjectiveC.NSObject {
  public typealias Color = PayPalCheckout.PayPalButton.Color
  public typealias Label = PayPalCheckout.PayPalButton.Label
  @objc override dynamic public init()
  public init(color: PayPalCheckout.PayPalButtonUIConfiguration.Color = .gold, label: PayPalCheckout.PayPalButtonUIConfiguration.Label? = nil, attributes: PayPalCheckout.PaymentButtonAttributes = .init())
  @objc deinit
}
public enum FundingProvider : Swift.String {
  case payPal
  case venmo
  public static let `default`: PayPalCheckout.FundingProvider
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ShutdownState : Swift.Equatable {
  case approved
  case cancelled
  case fallback
  case optOut
  case error(name: Swift.String)
  case none
  public static func == (a: PayPalCheckout.ShutdownState, b: PayPalCheckout.ShutdownState) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class State {
  public static var mutationState: PayPalCheckout.GraphQLMutationState {
    get
  }
  public static var payToken: PayPalCheckout.PayToken {
    get
    set
  }
  public static var correlationIDs: PayPalCheckout.CorrelationIDs {
    get
  }
  @objc deinit
}
public protocol BankAccountBeneficiary {
  var fullName: Swift.String { get }
}
public protocol BankAccountIssuer {
  var name: Swift.String { get }
  var city: Swift.String { get }
  var country: Swift.String { get }
  var branchLocation: Swift.String? { get }
}
public protocol BankAccountCreditor {
  var id: Swift.String { get }
  var name: Swift.String { get }
  var address: PayPalCheckout.Address { get }
}
public protocol BankAccount {
  var id: Swift.String { get }
  var nickname: Swift.String? { get }
  var type: PayPalCheckout.BankAccountType { get }
  var routingNumber: Swift.String { get }
  var accountNumber: Swift.String { get }
  var accountNumberShort: Swift.String { get }
  var bankIdentifierCode: Swift.String { get }
  var currencyCode: Swift.String { get }
  var beneficiaries: [PayPalCheckout.BankAccountBeneficiary] { get }
  var billingAddress: PayPalCheckout.Address? { get }
  var issuer: PayPalCheckout.BankAccountIssuer? { get }
  var creditor: PayPalCheckout.BankAccountCreditor? { get }
}
@objc(PPCOrderAddress) @objcMembers public class OrderAddress : ObjectiveC.NSObject, Swift.Encodable {
  @objc final public let addressLine1: Swift.String?
  @objc final public let addressLine2: Swift.String?
  @objc final public let adminArea1: Swift.String?
  @objc final public let adminArea2: Swift.String?
  @objc final public let postalCode: Swift.String?
  @objc final public let countryCode: Swift.String
  @objc public init(countryCode: Swift.String, addressLine1: Swift.String? = nil, addressLine2: Swift.String? = nil, adminArea1: Swift.String? = nil, adminArea2: Swift.String? = nil, postalCode: Swift.String? = nil)
  @objc deinit
  @objc override dynamic public init()
  public func encode(to encoder: Swift.Encoder) throws
}
@objc(PPCOrderIntent) public enum OrderIntent : Swift.Int {
  case capture
  case authorize
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ShippingDetailsPage : PayPalCheckout.ContentPage {
  override public var headerAccessibilityElements: [Any]? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InboundNetworkStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.InboundNetworkStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RateChangeView : UIKit.UIView, PayPalCheckout.FadingContentView, PayPalCheckout.ViewModelView, PayPalCheckout.ActionableRow {
  public var id: Swift.String {
    get
  }
  public func desiredHeight(forWidth availableWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  public var isVisible: Swift.Bool {
    get
  }
  @objc deinit
  public func updateData()
  public func didSelectRow()
  public func willChangeHeight(with update: PayPalCheckout.PageHeightUpdate)
  public func didChangeHeight(with update: PayPalCheckout.PageHeightUpdate)
}
@_hasMissingDesignatedInitializers public class ContentConfig {
  public var primaryFont: UIKit.UIFont
  public var secondaryFont: UIKit.UIFont
  public var tertiaryFont: UIKit.UIFont
  public var quaternaryFont: UIKit.UIFont
  public var boldFont: UIKit.UIFont
  public var boldSecondaryFont: UIKit.UIFont
  public var headerFont: UIKit.UIFont
  final public let systemFont13: UIKit.UIFont
  final public let systemFont15: UIKit.UIFont
  public var systemFont18: UIKit.UIFont
  public var systemFont22: UIKit.UIFont
  final public let systemFont24: UIKit.UIFont
  final public let systemFont28: UIKit.UIFont
  final public let systemFont30: UIKit.UIFont
  public var cardTopLeftLabelFont: UIKit.UIFont
  public var cardMiddleLeftLabelFont: UIKit.UIFont
  public var initialsLabelFont: UIKit.UIFont
  public var cardPrimaryFont: UIKit.UIFont
  public var cardSecondaryFont: UIKit.UIFont
  public var cardBankNameFont: UIKit.UIFont
  public var cardAddNewFont: UIKit.UIFont
  public var starLabelFont: UIKit.UIFont
  public var titleLabelFont: UIKit.UIFont
  public var profilePageLinksFont: UIKit.UIFont
  public var ctaButtonFont: UIKit.UIFont
  public var systemFont13Bold: UIKit.UIFont
  public var boldLinkFont: UIKit.UIFont
  public var subheaderFont: UIKit.UIFont
  public var cartDetailsLineItemFont: UIKit.UIFont
  public var cartDetailsTaxesAndFeesFont: UIKit.UIFont
  public var colorSheet: PayPalCheckout.ColorSheet
  public var shadow: UIKit.UIColor {
    get
  }
  public var primaryColor: UIKit.UIColor {
    get
  }
  public var blackText: UIKit.UIColor {
    get
  }
  public var successColor: UIKit.UIColor {
    get
  }
  public var warningColor: UIKit.UIColor {
    get
  }
  public var errorColor: UIKit.UIColor {
    get
  }
  public var translucentColor: UIKit.UIColor {
    get
  }
  public var transparentColor: UIKit.UIColor {
    get
  }
  public var labelColor: UIKit.UIColor {
    get
  }
  public var secondaryLabelColor: UIKit.UIColor {
    get
  }
  public var tertiaryLabelColor: UIKit.UIColor {
    get
  }
  public var quaternaryLabelColor: UIKit.UIColor {
    get
  }
  public var labelOnLightBackground: UIKit.UIColor {
    get
  }
  public var labelOnDarkBackground: UIKit.UIColor {
    get
  }
  public var selectedBlueLabelColor: UIKit.UIColor {
    get
  }
  public var buttonNormalTextColor: UIKit.UIColor {
    get
  }
  public var callToActionBlueButton: UIKit.UIColor {
    get
  }
  public var placeholderTextColor: UIKit.UIColor {
    get
  }
  public var linkColor: UIKit.UIColor {
    get
  }
  public var separatorColor: UIKit.UIColor {
    get
  }
  public var opaqueSeparatorColor: UIKit.UIColor {
    get
  }
  public var systemFillColor: UIKit.UIColor {
    get
  }
  public var secondarySystemFillColor: UIKit.UIColor {
    get
  }
  public var tertiarySystemFillColor: UIKit.UIColor {
    get
  }
  public var quaternarySystemFillColor: UIKit.UIColor {
    get
  }
  public var systemBackgroundColor: UIKit.UIColor {
    get
  }
  public var secondarySystemBackgroundColor: UIKit.UIColor {
    get
  }
  public var tertiarySystemBackgroundColor: UIKit.UIColor {
    get
  }
  public var systemGroupedBackgroundColor: UIKit.UIColor {
    get
  }
  public var secondarySystemGroupedBackgroundColor: UIKit.UIColor {
    get
  }
  public var tertiarySystemGroupedBackgroundColor: UIKit.UIColor {
    get
  }
  public var systemRed: UIKit.UIColor {
    get
  }
  public var systemOrange: UIKit.UIColor {
    get
  }
  public var systemYellow: UIKit.UIColor {
    get
  }
  public var systemGreen: UIKit.UIColor {
    get
  }
  public var systemTeal: UIKit.UIColor {
    get
  }
  public var systemBlue: UIKit.UIColor {
    get
  }
  public var systemIndigo: UIKit.UIColor {
    get
  }
  public var systemPurple: UIKit.UIColor {
    get
  }
  public var systemPink: UIKit.UIColor {
    get
  }
  public var systemGray: UIKit.UIColor {
    get
  }
  public var systemGray2: UIKit.UIColor {
    get
  }
  public var systemGray3: UIKit.UIColor {
    get
  }
  public var systemGray4: UIKit.UIColor {
    get
  }
  public var systemGray5: UIKit.UIColor {
    get
  }
  public var systemGray6: UIKit.UIColor {
    get
  }
  public var darkGrayHex1: UIKit.UIColor {
    get
  }
  public var darkGrayHex2: UIKit.UIColor {
    get
  }
  public var lightGrayHexCBD2D6: UIKit.UIColor {
    get
  }
  public var lightGrayHexEAECED: UIKit.UIColor {
    get
  }
  public var lightGrayHexDBD8D0: UIKit.UIColor {
    get
  }
  public var lightOrange: UIKit.UIColor {
    get
  }
  public var darkOrange: UIKit.UIColor {
    get
  }
  public var toggleGreenHex00CF92: UIKit.UIColor {
    get
  }
  public var selectedBlueBorder: UIKit.UIColor {
    get
  }
  public var selectedBlueBackground: UIKit.UIColor {
    get
  }
  public var highlightedBlueBackground: UIKit.UIColor {
    get
  }
  public var placeholderTextDarkGray: UIKit.UIColor {
    get
  }
  public var animationTiming: Swift.Double
  public var cornerRadius: CoreGraphics.CGFloat
  public var observedCornerRadius: CoreGraphics.CGFloat?
  public var ctaBorderWidth: CoreGraphics.CGFloat
  public var topMargin: CoreGraphics.CGFloat
  public var contentViewSideMargin: CoreGraphics.CGFloat
  public var gridSize: CoreGraphics.CGFloat
  public var inset: CoreGraphics.CGFloat {
    get
    set
  }
  public var labelInsets: UIKit.UIEdgeInsets {
    get
    set
  }
  public var iconGridSize: CoreGraphics.CGRect {
    get
    set
  }
  public var buttonGridSize: CoreGraphics.CGRect {
    get
    set
  }
  public var tableCellIconSize: CoreGraphics.CGRect {
    get
    set
  }
  public var tableCellButtonSize: CoreGraphics.CGRect {
    get
    set
  }
  final public let carouselSelectionZoom: CoreGraphics.CGFloat
  public var carouselSelectedImageSize: CoreGraphics.CGRect
  public var carouselAddCardImageSize: CoreGraphics.CGRect
  public var carouselUnselectedImageSize: CoreGraphics.CGRect {
    get
  }
  public var carouselImageSize: CoreGraphics.CGRect {
    get
  }
  public var lineItemsItemVerticalSpacing: CoreGraphics.CGFloat {
    get
    set
  }
  public var lineItemsTopPadding: CoreGraphics.CGFloat {
    get
    set
  }
  public var lineItemsBottomPadding: CoreGraphics.CGFloat {
    get
    set
  }
  public var lineItemsTopLineOrnamentTopPadding: CoreGraphics.CGFloat
  public var lineItemsTopLineOrnamentHeight: CoreGraphics.CGFloat
  public var taxesAndFeesTopPadding: CoreGraphics.CGFloat {
    get
    set
  }
  public var taxesAndFeesItemVerticalSpacing: CoreGraphics.CGFloat {
    get
    set
  }
  public var taxesAndFeesTotalItemTopPadding: CoreGraphics.CGFloat {
    get
    set
  }
  public var taxesAndFeesTopLineOrnamentHeight: CoreGraphics.CGFloat
  public var taxesAndFeesBottomLineOrnamentHeight: CoreGraphics.CGFloat
  public var taxesAndFeesLastLineOrnamentHeight: CoreGraphics.CGFloat {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
@objc(PPCPaymentButton) @objcMembers public class PaymentButton : UIKit.UIButton {
  weak public var delegate: PayPalCheckout.PaymentButtonDelegate? {
    get
    set
  }
  @objc override dynamic public var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public func checkoutFinished()
  @objc public var fundingSource: PayPalCheckout.PaymentButtonFundingSource {
    get
  }
  @objc public var color: PayPalCheckout.PaymentButtonColor {
    @objc get
    @objc set
  }
  @objc public var edges: PayPalCheckout.PaymentButtonEdges {
    @objc get
    @objc set
  }
  @objc public var size: PayPalCheckout.PaymentButtonSize {
    @objc get
    @objc set
  }
  public var insets: UIKit.NSDirectionalEdgeInsets? {
    get
  }
  public var label: PayPalCheckout.PaymentButtonLabel? {
    get
    set
  }
  @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
  @objc override dynamic public func layoutSubviews()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
public protocol ViewModelView : AnyObject {
  func updateData()
  func resetState()
}
public protocol ViewModel : AnyObject {
}
extension ViewModelView {
  public func updateData()
  public func resetState()
}
@objc(PPCOrderPayer) @objcMembers public class OrderPayer : ObjectiveC.NSObject, Swift.Encodable {
  @objc final public let name: PayPalCheckout.OrderPayer.Name?
  @objc final public let emailAddress: Swift.String?
  @objc final public let payerId: Swift.String?
  @objc final public let phone: PayPalCheckout.OrderPayer.Phone?
  @objc final public let birthDate: Swift.String?
  @objc final public let taxInfo: PayPalCheckout.OrderPayer.TaxInfo?
  @objc final public let address: PayPalCheckout.OrderAddress?
  @objc public init(name: PayPalCheckout.OrderPayer.Name? = nil, emailAddress: Swift.String? = nil, payerId: Swift.String? = nil, phone: PayPalCheckout.OrderPayer.Phone? = nil, birthDate: Swift.String? = nil, taxInfo: PayPalCheckout.OrderPayer.TaxInfo? = nil, address: PayPalCheckout.OrderAddress? = nil)
  @objc deinit
  @objc(PPCOrderPayerName) @objcMembers public class Name : ObjectiveC.NSObject, Swift.Encodable {
    @objc final public let givenName: Swift.String?
    @objc final public let surname: Swift.String?
    @objc public init(givenName: Swift.String? = nil, surname: Swift.String? = nil)
    @objc deinit
    @objc override dynamic public init()
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc(PPCOrderPayerPhone) @objcMembers public class Phone : ObjectiveC.NSObject, Swift.Encodable {
    @objc final public let phoneType: PayPalCheckout.OrderPayer.PhoneType
    @objc final public let phoneNumber: PayPalCheckout.OrderPayer.PhoneNumber
    @objc public init(phoneNumber: PayPalCheckout.OrderPayer.PhoneNumber, phoneType: PayPalCheckout.OrderPayer.PhoneType = .none)
    @objc deinit
    @objc override dynamic public init()
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc(PPCOrderPayerPhoneType) public enum PhoneType : Swift.Int {
    case none
    case fax
    case home
    case mobile
    case other
    case pager
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(PPCOrderPayerPhoneNumber) @objcMembers public class PhoneNumber : ObjectiveC.NSObject, Swift.Encodable {
    @objc final public let nationalNumber: Swift.String
    @objc public init(nationalNumber: Swift.String)
    @objc deinit
    @objc override dynamic public init()
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc(PPCOrderPayerTaxInfo) @objcMembers public class TaxInfo : ObjectiveC.NSObject, Swift.Encodable {
    @objc final public let taxId: Swift.String
    @objc final public let taxIdType: PayPalCheckout.OrderPayer.TaxIdType
    @objc public init(taxId: Swift.String, taxIdType: PayPalCheckout.OrderPayer.TaxIdType)
    @objc deinit
    @objc override dynamic public init()
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc(PPCOrderPayerTaxIdType) public enum TaxIdType : Swift.Int {
    case individual
    case buisness
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc override dynamic public init()
  public func encode(to encoder: Swift.Encoder) throws
}
@available(*, deprecated, message: "Please use the new backgrounds member in ExtendedCheckoutConfig")
public struct BrandedBackgroundConfig : Swift.Equatable {
  public var brandedBackgroundImageURLPlaceholder: UIKit.UIImage?
  public var brandedBackgroundImageURL: Foundation.URL?
  public var brandedBackgroundImage: UIKit.UIImage?
  public var logoImage: UIKit.UIImage?
  public var logoPositioning: PayPalCheckout.LogoPositioningConfig?
  public var backgroundImageColor: UIKit.UIColor?
  public static func == (a: PayPalCheckout.BrandedBackgroundConfig, b: PayPalCheckout.BrandedBackgroundConfig) -> Swift.Bool
}
public enum RequestError : Foundation.LocalizedError {
  case missingData
  case noData
  case encodingFailure(Swift.Error)
  case decodingFailure(Swift.Error)
  case statusCode(Swift.Int)
  case unsupported(Swift.String)
  case other(Swift.Error)
  public var errorDescription: Swift.String? {
    get
  }
}
@objc(PPCPaymentButtonLabel) public enum PaymentButtonLabel : Swift.Int {
  case checkout = 0
  case buyNow = 1
  case payWith = 2
  case payLater = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(PPCPurchaseUnit) @objcMembers public class PurchaseUnit : ObjectiveC.NSObject, Swift.Encodable {
  @objc final public let referenceId: Swift.String?
  @objc final public let amount: PayPalCheckout.PurchaseUnit.Amount
  @objc final public let payee: PayPalCheckout.PurchaseUnit.Payee?
  @objc final public let paymentInstruction: PayPalCheckout.PurchaseUnit.PaymentInstruction?
  @objc final public let purchaseUnitDescription: Swift.String?
  @objc final public let customId: Swift.String?
  @objc final public let invoiceId: Swift.String?
  @objc final public let softDescriptor: Swift.String?
  @objc final public let items: [PayPalCheckout.PurchaseUnit.Item]?
  @objc final public let shipping: PayPalCheckout.PurchaseUnit.Shipping?
  @objc public init(amount: PayPalCheckout.PurchaseUnit.Amount, referenceId: Swift.String? = nil, payee: PayPalCheckout.PurchaseUnit.Payee? = nil, paymentInstruction: PayPalCheckout.PurchaseUnit.PaymentInstruction? = nil, purchaseUnitDescription: Swift.String? = nil, customId: Swift.String? = nil, invoiceId: Swift.String? = nil, softDescriptor: Swift.String? = nil, items: [PayPalCheckout.PurchaseUnit.Item]? = nil, shipping: PayPalCheckout.PurchaseUnit.Shipping? = nil)
  @objc deinit
  @objc(PPCPurchaseUnitAmount) @objcMembers public class Amount : ObjectiveC.NSObject, Swift.Encodable {
    @objc final public let currencyCode: PayPalCheckout.CurrencyCode
    @objc final public let value: Swift.String
    @objc final public let breakdown: PayPalCheckout.PurchaseUnit.Breakdown?
    @objc public init(currencyCode: PayPalCheckout.CurrencyCode, value: Swift.String, breakdown: PayPalCheckout.PurchaseUnit.Breakdown? = nil)
    @objc deinit
    @objc override dynamic public init()
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc(PPCPurchaseUnitBreakdown) @objcMembers public class Breakdown : ObjectiveC.NSObject, Swift.Encodable {
    @objc final public let itemTotal: PayPalCheckout.UnitAmount?
    @objc final public let shipping: PayPalCheckout.UnitAmount?
    @objc final public let handling: PayPalCheckout.UnitAmount?
    @objc final public let taxTotal: PayPalCheckout.UnitAmount?
    @objc final public let insurance: PayPalCheckout.UnitAmount?
    @objc final public let shippingDiscount: PayPalCheckout.UnitAmount?
    @objc final public let discount: PayPalCheckout.UnitAmount?
    @objc public init(itemTotal: PayPalCheckout.UnitAmount? = nil, shipping: PayPalCheckout.UnitAmount? = nil, handling: PayPalCheckout.UnitAmount? = nil, taxTotal: PayPalCheckout.UnitAmount? = nil, insurance: PayPalCheckout.UnitAmount? = nil, shippingDiscount: PayPalCheckout.UnitAmount? = nil, discount: PayPalCheckout.UnitAmount? = nil)
    @objc deinit
    @objc override dynamic public init()
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc(PPCPurchaseUnitPayee) @objcMembers public class Payee : ObjectiveC.NSObject, Swift.Encodable {
    @objc final public let emailAddress: Swift.String?
    @objc final public let merchantId: Swift.String?
    @objc public init(emailAddress: Swift.String? = nil, merchantId: Swift.String? = nil)
    @objc deinit
    @objc override dynamic public init()
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc(PPCPurchaseUnitPaymentInstruction) @objcMembers public class PaymentInstruction : ObjectiveC.NSObject, Swift.Encodable {
    @objc final public let platformFees: [PayPalCheckout.PurchaseUnit.PlatformFees]?
    @objc final public let disbursementMode: PayPalCheckout.PurchaseUnit.DisbursementMode
    @objc public init(platformFees: [PayPalCheckout.PurchaseUnit.PlatformFees]? = nil, disbursementMode: PayPalCheckout.PurchaseUnit.DisbursementMode = .none)
    @objc deinit
    @objc override dynamic public init()
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc(PPCPurchaseUnitPlatformFees) @objcMembers public class PlatformFees : ObjectiveC.NSObject, Swift.Encodable {
    @objc final public let amount: PayPalCheckout.PurchaseUnit.Amount
    @objc final public let payee: PayPalCheckout.PurchaseUnit.Payee?
    @objc public init(amount: PayPalCheckout.PurchaseUnit.Amount, payee: PayPalCheckout.PurchaseUnit.Payee? = nil)
    @objc deinit
    @objc override dynamic public init()
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc(PPCPurchaseUnitDisbursementMode) public enum DisbursementMode : Swift.Int {
    case none
    case instant
    case delayed
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(PPCPurchaseUnitItem) @objcMembers public class Item : ObjectiveC.NSObject, Swift.Encodable {
    @objc final public let name: Swift.String
    @objc final public let unitAmount: PayPalCheckout.UnitAmount
    @objc final public let tax: PayPalCheckout.PurchaseUnit.Tax?
    @objc final public let quantity: Swift.String
    @objc final public let itemDescription: Swift.String?
    @objc final public let sku: Swift.String?
    @objc final public let category: PayPalCheckout.PurchaseUnit.Category
    @objc public init(name: Swift.String, unitAmount: PayPalCheckout.UnitAmount, quantity: Swift.String, tax: PayPalCheckout.PurchaseUnit.Tax? = nil, itemDescription: Swift.String? = nil, sku: Swift.String? = nil, category: PayPalCheckout.PurchaseUnit.Category = .none)
    @objc deinit
    @objc override dynamic public init()
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc(PPCPurchaseUnitTax) @objcMembers public class Tax : ObjectiveC.NSObject, Swift.Encodable {
    @objc final public let currencyCode: PayPalCheckout.CurrencyCode
    @objc final public let value: Swift.String
    @objc public init(currencyCode: PayPalCheckout.CurrencyCode, value: Swift.String)
    @objc deinit
    @objc override dynamic public init()
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc(PPCPurchaseUnitCategory) public enum Category : Swift.Int {
    case none
    case digitalGoods
    case physicalGoods
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(PPCPurchaseUnitShipping) @objcMembers public class Shipping : ObjectiveC.NSObject, Swift.Encodable {
    @objc final public let shippingName: PayPalCheckout.PurchaseUnit.ShippingName?
    @objc final public let address: PayPalCheckout.OrderAddress?
    @objc final public let options: [PayPalCheckout.ShippingMethod]?
    @objc public init(shippingName: PayPalCheckout.PurchaseUnit.ShippingName? = nil, address: PayPalCheckout.OrderAddress? = nil, options: [PayPalCheckout.ShippingMethod]? = nil)
    @objc deinit
    @objc override dynamic public init()
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc(PPCPurchaseUnitShippingName) @objcMembers public class ShippingName : ObjectiveC.NSObject, Swift.Encodable {
    @objc final public let fullName: Swift.String?
    @objc public init(fullName: Swift.String? = nil)
    @objc deinit
    @objc override dynamic public init()
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc override dynamic public init()
  public func encode(to encoder: Swift.Encoder) throws
}
public struct AddCardField {
}
public struct FPTIEntry : Swift.Codable {
  public var eventType: Swift.String
  public var funnelStage: Swift.String? {
    get
    set
  }
  public var fileName: Swift.String?
  public var fileFunction: Swift.String?
  public var fileLine: Swift.Int?
  public var debugId: Swift.String?
  public var errorType: Swift.String?
  public var internalErrorCode: Swift.String?
  public var externalErrorCode: Swift.String?
  public var errorMessage: Swift.String?
  public var errorDetails: Swift.String?
  public var transitionName: Swift.String?
  public var outcome: Swift.String?
  public var stateName: Swift.String?
  public var informationMessage: Swift.String?
  public var parentName: Swift.String?
  public var childName: Swift.String?
  public var eventName: Swift.String?
  public let viewName: Swift.String?
  public var eventCategory: Swift.String?
  public var fieldName: Swift.String?
  public var addressCount: Swift.Int?
  public var fallbackReason: Swift.String?
  public var fallbackCategory: Swift.String?
  public var fallbackFrom: Swift.String?
  public var fallbackTo: Swift.String?
  public var originScreen: Swift.String?
  public var destinationScreen: Swift.String?
  public var payloadSent: Swift.String?
  public var webFragment: Swift.String?
  public var experimentationExperience: Swift.String?
  public var experimentationTreatment: Swift.String?
  public init(eventType: PayPalCheckout.FPTIEventType, funnelStage: Swift.String? = nil, fileName: Swift.String = #file, fileFunction: Swift.String = #function, fileLine: Swift.Int = #line, debugId: Swift.String? = nil, errorType: Swift.String? = nil, internalErrorCode: Swift.String? = nil, externalErrorCode: Swift.String? = nil, errorMessage: Swift.String? = nil, errorDetails: Swift.String? = nil, transitionName: Swift.String? = nil, outcome: Swift.String? = nil, stateName: Swift.String? = nil, informationMessage: Swift.String? = nil, parentName: Swift.String? = nil, childName: Swift.String? = nil, viewName: Swift.String? = nil, eventName: Swift.String? = nil, fallbackReason: Swift.String? = nil, fallbackCategory: Swift.String? = nil, fallbackFrom: Swift.String? = nil, fallbackTo: Swift.String? = nil, originScreen: Swift.String? = nil, destinationScreen: Swift.String? = nil, payloadSent: Swift.String? = nil, webFragment: Swift.String? = nil, experimentationExperience: Swift.String? = nil, experimentationTreatment: Swift.String? = nil, usedFundingSource: Swift.String? = nil, ctaContent: Swift.String? = nil, assistiveTouchRunning: Swift.Bool? = nil, grayscaleEnabled: Swift.Bool? = nil, boldTextEnabled: Swift.Bool? = nil, voiceOverRunning: Swift.Bool? = nil, monoAudioEnabled: Swift.Bool? = nil, speakScreenEnabled: Swift.Bool? = nil, invertColorsEnabled: Swift.Bool? = nil, speakSelectionEnabled: Swift.Bool? = nil, reduceMotionEnabled: Swift.Bool? = nil, reduceTransparencyEnabled: Swift.Bool? = nil, darkerSystemColorsEnabled: Swift.Bool? = nil, preferredContentSizeCategory: Swift.String? = nil, currencyCode: Swift.String? = nil, shippingAmount: Swift.String? = nil, totalAmount: Swift.String? = nil, tab: Swift.String? = nil, fieldName: Swift.String? = nil, addressCount: Swift.Int? = nil, queryName: Swift.String? = nil, duration: Swift.Int64? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class HomePage : PayPalCheckout.ContentPage {
  @objc deinit
}
public typealias CustomContentLayout = (PayPalCheckout.ContentView) -> CoreGraphics.CGFloat
public enum ContentLayout {
  case verticallyStacked
  case horizontallyStacked
  case custom(PayPalCheckout.CustomContentLayout)
}
public struct PageHeightUpdate {
  public let change: PayPalCheckout.HeightChange
  public let isPageChange: Swift.Bool
  public let newPage: PayPalCheckout.ContentPage?
  public let animation: PayPalCheckout.Animation
  public init(change: PayPalCheckout.HeightChange, isPageChange: Swift.Bool, newPage: PayPalCheckout.ContentPage? = nil, animation: PayPalCheckout.Animation)
}
extension UIAccessibility {
  public static var isLargeAccessibilityFont: Swift.Bool {
    get
  }
  public static func getAccessibilitiesNotificationNames() -> [Foundation.NSNotification.Name]
  public static func isAnyAccessibilityEnabled() -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class GQLQuery<QuerySuccess> : Swift.Encodable where QuerySuccess : Swift.Decodable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @objc(PPCAuthorizeActionSuccess) @objcMembers public class AuthorizeActionSuccess : ObjectiveC.NSObject {
  @objc final public let data: PayPalCheckout.OrderActionData
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers public class ConfigureUIStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.ConfigureUIStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
public enum ThreeDSPaymentExperience : Swift.String, Swift.Codable, Swift.CaseIterable {
  case iframe
  case redirect
  case hopfree
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayPalCheckout.ThreeDSPaymentExperience]
  public typealias RawValue = Swift.String
  public static var allCases: [PayPalCheckout.ThreeDSPaymentExperience] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum ThreeDSContingencySourceType : Swift.String, Swift.Codable, Swift.CaseIterable, Swift.Equatable {
  case unknown
  case paymentContext
  case paypalRisk
  case card
  case cardState
  case authorization
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayPalCheckout.ThreeDSContingencySourceType]
  public typealias RawValue = Swift.String
  public static var allCases: [PayPalCheckout.ThreeDSContingencySourceType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum ThreeDSContingencyReasonType : Swift.String, Swift.Codable, Swift.CaseIterable, Swift.Equatable {
  case unknown
  case regulatoryMandate
  case merchantRequested
  case paypalPolicy
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayPalCheckout.ThreeDSContingencyReasonType]
  public typealias RawValue = Swift.String
  public static var allCases: [PayPalCheckout.ThreeDSContingencyReasonType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc open class AspectRatioImageView : UIKit.UIImageView, PayPalCheckout.AlignableImageView {
  public var insets: UIKit.UIEdgeInsets
  public var imageAlignment: PayPalCheckout.ImageAlignment {
    get
    set
  }
  public func desiredHeight(forWidth availableWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  convenience public init(_ image: UIKit.UIImage? = nil, alignment: PayPalCheckout.ImageAlignment = .start, insets: UIKit.UIEdgeInsets = .zero)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @available(*, unavailable)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public init(image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
}
public class GraphQLMutationState {
  public var merchantId: Swift.String?
  public var preferredFundingOption: PayPalCheckout.FundingOption?
  public var selectedPlan: PayPalCheckout.Plan?
  public var currencyConversion: PayPalCheckout.CurrencyConversionType?
  public var billingAddress: PayPalCheckout.Address?
  public var selectedAddress: PayPalCheckout.ShippingAddress?
  public var selectedShippingMethod: PayPalCheckout.ShippingMethod?
  public var intent: Swift.String?
  public var userAction: PayPalCheckout.UserAction?
  public var cryptocurrencyQuotes: [PayPalCheckout.CryptocurrencyQuote]?
  public init()
  @objc deinit
}
public typealias NetworkOperationCompletion = (PayPalCheckout.NetworkResult, Any?) -> Swift.Void
public struct NetworkOperation : Swift.Identifiable, Swift.Equatable {
  public var id: Swift.String {
    get
  }
  public var name: PayPalCheckout.StaticIdentifier
  public var type: PayPalCheckout.NetworkActionType
  public var actionName: Swift.String?
  public var synchronicity: PayPalCheckout.NetworkSynchronicity
  public var operation: (PayPalCheckout.NetworkInput?, PayPalCheckout.NetworkOperationCompletion?) -> Swift.Void
  public init(_ named: PayPalCheckout.StaticIdentifier, type: PayPalCheckout.NetworkActionType = .Inbound, actionName: Swift.String? = nil, synchronicity: PayPalCheckout.NetworkSynchronicity = .asynchronous, operation: @escaping (PayPalCheckout.NetworkInput?, PayPalCheckout.NetworkOperationCompletion?) -> Swift.Void)
  public static func == (lhs: PayPalCheckout.NetworkOperation, rhs: PayPalCheckout.NetworkOperation) -> Swift.Bool
  public typealias ID = Swift.String
}
open class ContentPage : PayPalCheckout.StaticIdentifiable, Swift.Equatable {
  open class var id: PayPalCheckout.StaticIdentifier {
    get
  }
  public var staticId: PayPalCheckout.StaticIdentifier {
    get
  }
  open var headerLayout: PayPalCheckout.ContentLayout
  open var headerViews: [PayPalCheckout.ContentView]
  open var mainViews: [PayPalCheckout.ContentView]
  open var footerLayout: PayPalCheckout.ContentLayout
  open var footerViews: [PayPalCheckout.ContentView]
  open var buttonStates: [PayPalCheckout.ButtonStateKey : PayPalCheckout.ButtonState] {
    get
    set
  }
  open var primaryButtonState: PayPalCheckout.ButtonState? {
    get
    set
  }
  open var currentButtonStateKey: PayPalCheckout.ButtonStateKey {
    get
    set
  }
  open var currentButtonState: PayPalCheckout.ButtonState? {
    get
  }
  open var id: Swift.String {
    get
  }
  open var accessibilityLastSelectedElement: PayPalCheckout.ContentView?
  open var headerAccessibilityElements: [Any]? {
    get
  }
  public init()
  @objc deinit
  public func hasView(id: PayPalCheckout.StaticIdentifier, in section: PayPalCheckout.ContentSection) -> Swift.Bool
  public func indexOfView(id: PayPalCheckout.StaticIdentifier, in section: PayPalCheckout.ContentSection) -> Swift.Int?
  public func getView(id: PayPalCheckout.StaticIdentifier, in section: PayPalCheckout.ContentSection) -> PayPalCheckout.ContentView?
  public func findView(id: PayPalCheckout.StaticIdentifier, in section: PayPalCheckout.ContentSection) -> PayPalCheckout.ContentView?
  public func appendView(_ view: PayPalCheckout.ContentView, in section: PayPalCheckout.ContentSection)
  public func appendViews(_ views: [PayPalCheckout.ContentView], in section: PayPalCheckout.ContentSection)
  public func insertView(_ view: PayPalCheckout.ContentView, in section: PayPalCheckout.ContentSection, at index: Swift.Int)
  public func insertViews(_ views: [PayPalCheckout.ContentView], in section: PayPalCheckout.ContentSection, at index: Swift.Int)
  public func removeView(from section: PayPalCheckout.ContentSection, at index: Swift.Int) -> PayPalCheckout.ContentView
  public func removeView(from section: PayPalCheckout.ContentSection, with viewId: PayPalCheckout.StaticIdentifier)
  public func removeAllViews(from section: PayPalCheckout.ContentSection) -> [PayPalCheckout.ContentView]
  public static func == (lhs: PayPalCheckout.ContentPage, rhs: PayPalCheckout.ContentPage) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers @available(*, deprecated, message: "Please use the new backgrounds member in ExtendedCheckoutConfig")
final public class BrandedBackgroundView : UIKit.UIView {
  public init(config: PayPalCheckout.BrandedBackgroundConfig)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
public protocol ConfirmCreditCardCvvContingency {
  var encryptedid: Swift.String { get }
  var lastFourDigits: Swift.String { get }
  var type: PayPalCheckout.CardIssuer { get }
}
public protocol OpenBankingContingency {
  var encryptedId: Swift.String { get }
}
public protocol StrongCustomerAuthenticationRequiredContingency {
  var contextId: Swift.String? { get }
}
public protocol PaymentContingencies {
  var threeDomainSecure: PayPalCheckout.ThreeDomainSecureContingency? { get }
  var threeDSContingencyData: PayPalCheckout.ThreeDomainSecureResolutionContingency? { get }
  var confirmCreditCardCvvData: PayPalCheckout.ConfirmCreditCardCvvContingency? { get }
  var sepaMandateAcceptanceNeeded: PayPalCheckout.BankAccount? { get }
  var needConsentForBankAccountInfoRetrieval: PayPalCheckout.OpenBankingContingency? { get }
  var needRealTimeBalanceForBankAccount: PayPalCheckout.OpenBankingContingency? { get }
  var strongCustomerAuthenticationRequired: PayPalCheckout.StrongCustomerAuthenticationRequiredContingency? { get }
}
@_hasMissingDesignatedInitializers public class ResolveThreeDSStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.ResolveThreeDSStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
public typealias GetOrderIdCallback = (Swift.String?, Swift.Error?) -> Swift.Void
@_hasMissingDesignatedInitializers @objc(PPCCreateOrderAction) @objcMembers public class CreateOrderAction : ObjectiveC.NSObject {
  @objc deinit
  @objc public func create(order: PayPalCheckout.OrderRequest, completion: @escaping (Swift.String?) -> Swift.Void = { _ in })
  @objc public func set(orderId: Swift.String)
  @objc public func set(billingAgreementToken: Swift.String)
  @objc public func set(vaultApprovalSessionID: Swift.String)
  @objc public func cancel()
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class DeliverySelectionHeaderView : PayPalCheckout.UnconstrainedTextLabel {
  override public func desiredHeight(forWidth availableWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  override public var contentConstraints: PayPalCheckout.ContentConstrainer {
    get
  }
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc(PPCPaymentButtonEligibilityStatus) public enum PaymentButtonEligibilityStatus : Swift.Int {
  case loading
  case eligible
  case ineligible
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct Animation {
  public let duration: Foundation.TimeInterval
  public let block: (@escaping () -> Swift.Void) -> Swift.Void
  public let completion: (@escaping (UIKit.UIViewAnimatingPosition) -> Swift.Void) -> Swift.Void
  public init(duration: Foundation.TimeInterval, block: @escaping (@escaping () -> Swift.Void) -> Swift.Void, completion: @escaping (@escaping (UIKit.UIViewAnimatingPosition) -> Swift.Void) -> Swift.Void)
}
@objc(PPCOrderProcessingInstruction) public enum ProcessingInstruction : Swift.Int {
  case none
  case orderSavedExplicitly
  case orderSavedOnBuyerApproval
  case orderCompleteOnPaymentApproval
  case noInstruction
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class ProfileImageBubble : UIKit.UIImageView, PayPalCheckout.ContentView {
  public func desiredHeight(forWidth availableWidth: CoreGraphics.CGFloat = 0) -> CoreGraphics.CGFloat
  public var textColor: UIKit.UIColor
  public var borderColor: UIKit.UIColor
  public var fadeOnPageChange: Swift.Bool {
    get
  }
  public var contentConstraints: PayPalCheckout.ContentConstrainer {
    get
  }
  @objc deinit
  @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc override dynamic public init(image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
}
@_hasMissingDesignatedInitializers public class SecondaryApprovalStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.SecondaryApprovalStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
public struct ExternalTracking {
  public let clientID: Swift.String
  public let identifier: Swift.String
  public let externalTrackingEntries: [PayPalCheckout.ExternalTrackingProperty]
  public init(clientID: Swift.String, identifier: Swift.String, externalTrackingEntries: [PayPalCheckout.ExternalTrackingProperty])
}
@objc(PPCPaymentButtonColor) public enum PaymentButtonColor : Swift.Int, Swift.CaseIterable, Swift.CustomStringConvertible {
  case gold = 0
  case white = 1
  case black = 2
  case silver = 3
  case blue = 4
  case darkBlue = 5
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PayPalCheckout.PaymentButtonColor]
  public typealias RawValue = Swift.Int
  public static var allCases: [PayPalCheckout.PaymentButtonColor] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc(PPCShippingMethod) @objcMembers final public class ShippingMethod : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let id: Swift.String
  @objc final public let label: Swift.String
  @objc final public var selected: Swift.Bool {
    get
  }
  @objc final public let type: PayPalCheckout.ShippingType
  @objc final public let amount: PayPalCheckout.UnitAmount?
  @objc public init(id: Swift.String, label: Swift.String, selected: Swift.Bool, type: PayPalCheckout.ShippingType = .none, amount: PayPalCheckout.UnitAmount? = nil)
  @objc deinit
  @objc override dynamic public init()
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LoadingPage<Kind> : PayPalCheckout.ContentPage, PayPalCheckout.Transitionable where Kind : PayPalCheckout.StaticIdentifiable {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ApproveWebCheckoutStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.ApproveWebCheckoutStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
@_hasMissingDesignatedInitializers @objc(PPCApprovalData) @objcMembers public class ApprovalData : ObjectiveC.NSObject {
  final public let cart: PayPalCheckout.Cart?
  final public let buyer: PayPalCheckout.User?
  @objc final public let payerID: Swift.String
  @objc final public let ecToken: Swift.String
  @objc final public let billingToken: Swift.String?
  @objc final public let intent: PayPalCheckout.ApprovalOrderIntent
  @objc final public let returnURL: Foundation.URL?
  @objc final public let paymentID: Swift.String?
  @objc final public let vaultData: PayPalCheckout.VaultData?
  @objc final public let correlationIDs: PayPalCheckout.CorrelationIDs
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc(PPCApproval) @objcMembers public class Approval : ObjectiveC.NSObject {
  @objc final public let data: PayPalCheckout.ApprovalData
  @objc final public let actions: PayPalCheckout.ApprovalActions
  @objc deinit
  @objc override dynamic public init()
}
public enum Transition {
  public enum Start : PayPalCheckout.StaticIdentifiable {
  }
  public enum StartWithSpinner : PayPalCheckout.StaticIdentifiable {
  }
  public enum Finishing : PayPalCheckout.StaticIdentifiable {
  }
  public enum Shutdown : PayPalCheckout.StaticIdentifiable {
  }
  public enum Error : PayPalCheckout.StaticIdentifiable {
  }
}
@objc @_inheritsConvenienceInitializers public class RateChangePolicyHeaderView : PayPalCheckout.UnconstrainedTextLabel {
  override public func desiredHeight(forWidth availableWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  override public var contentConstraints: PayPalCheckout.ContentConstrainer {
    get
  }
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_hasMissingDesignatedInitializers public class ShutdownFirebaseStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.ShutdownFirebaseStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
public protocol FundingSource {
  var fundingInstrument: PayPalCheckout.FundingInstrument? { get }
  var fundingMethodType: PayPalCheckout.FundingInstrumentMethodType { get }
  var amount: PayPalCheckout.UnitAmount { get }
}
public protocol FundingOption {
  var fundingInstrument: PayPalCheckout.FundingInstrument { get }
  var availableAmount: PayPalCheckout.UnitAmount? { get }
  var plans: PayPalCheckout.PlanTypes? { get }
  var allPlans: [PayPalCheckout.Plan] { get }
  var planMap: [Swift.String : PayPalCheckout.Plan] { get }
  var id: Swift.String? { get }
}
public protocol CryptocurrencyHoldingDetails {
  var symbol: Swift.String? { get }
  var quantity: Swift.String? { get }
}
public protocol FundingInstrument {
  var id: Swift.String? { get }
  var name: Swift.String? { get }
  var label: Swift.String? { get }
  var formattedType: Swift.String? { get }
  var lastDigits: Swift.String? { get }
  var type: PayPalCheckout.FundingInstrumentType? { get }
  var subType: PayPalCheckout.FundingInstrumentSubType? { get }
  var imageURL: Foundation.URL? { get }
  var isPreferred: Swift.Bool { get }
  var cryptocurrencyHoldingDetails: PayPalCheckout.CryptocurrencyHoldingDetails? { get }
}
public struct LogoPositioningConfig : Swift.Equatable {
  public var xMultiplier: CoreGraphics.CGFloat
  public var yMultiplier: CoreGraphics.CGFloat
  public var height: CoreGraphics.CGFloat
  public var width: CoreGraphics.CGFloat
  public init(xMultiplier: CoreGraphics.CGFloat, yMultiplier: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat, width: CoreGraphics.CGFloat)
  public static func == (a: PayPalCheckout.LogoPositioningConfig, b: PayPalCheckout.LogoPositioningConfig) -> Swift.Bool
}
public struct OnCancel : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum ColorType {
  case buttonNormalText
  case callToActionBlueButton
  case lightOrange
  case lightGray1
  case lightGray2
  case lightGray3
  case darkGray1
  case darkGray2
  case toggleGreen
  case darkOrange
  case textField
  case label
  case secondaryLabel
  case tertiaryLabel
  case quaternaryLabel
  case placeholderText
  case blackText
  case link
  case separator
  case opaqueSeparator
  case shadow
  case systemFill
  case secondarySystemFill
  case tertiarySystemFill
  case quaternarySystemFill
  case systemBackground
  case secondarySystemBackground
  case tertiarySystemBackground
  case systemGroupedBackground
  case secondarySystemGroupedBackground
  case tertiarySystemGroupedBackground
  case systemRed
  case systemOrange
  case systemYellow
  case systemGreen
  case systemTeal
  case systemBlue
  case systemIndigo
  case systemPurple
  case systemPink
  case systemGray
  case systemGray2
  case systemGray3
  case systemGray4
  case systemGray5
  case systemGray6
  case primary
  case success
  case warning
  case error
  case translucent
  case transparent
  case labelOnLightBackground
  case labelOnDarkBackground
  case textInputLeftIconColor
  case paymentButtonGold
  case paymentButtonWhite
  case paymentButtonBlack
  case paymentButtonSilver
  case paymentButtonBlue
  case paymentButtonDarkBlue
  case paymentButtonGoldHighlighted
  case paymentButtonWhiteHighlighted
  case paymentButtonBlackHighlighted
  case paymentButtonSilverHighlighted
  case paymentButtonBlueHighlighted
  case paymentButtonDarkBlueHighlighted
  case paymentButtonLoadingIndicator
  case selectedBlueBorder
  case selectedBlueBackground
  case highlightedBlueBackground
  case selectedBlueLabelColor
  case placeholderTextDarkGray
  case lineItemLabel
  case lineItemSecondaryLabel
  case totalTaxesAndFeesLabel
  public var color: UIKit.UIColor {
    get
  }
  public static func == (a: PayPalCheckout.ColorType, b: PayPalCheckout.ColorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(PPCApprovalActions) @objcMembers public class ApprovalActions : ObjectiveC.NSObject {
  @objc public func capture(onComplete: @escaping (PayPalCheckout.CaptureActionSuccess?, Swift.Error?) -> Swift.Void)
  @objc public func authorize(onComplete: @escaping (PayPalCheckout.AuthorizeActionSuccess?, Swift.Error?) -> Swift.Void)
  @objc public func patch(request: PayPalCheckout.PatchRequest, onComplete: @escaping (PayPalCheckout.PatchActionSuccess?, Swift.Error?) -> Swift.Void)
  @objc public func executeBillingAgreement(onComplete: @escaping (PayPalCheckout.BillingActionData?, Swift.Error?) -> Swift.Void)
  @objc deinit
  @objc override dynamic public init()
}
public enum NetworkStatus {
  case success
  case failure
  case inProgress
  public static func == (a: PayPalCheckout.NetworkStatus, b: PayPalCheckout.NetworkStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum HeightChange {
  case noChange
  case growing
  case shrinking
  public init(previous: CoreGraphics.CGFloat, new: CoreGraphics.CGFloat)
  public static func == (a: PayPalCheckout.HeightChange, b: PayPalCheckout.HeightChange) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class ResetEnvironmentStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.ResetEnvironmentStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
extension String {
  @discardableResult
  public func attributed(_ defAttributes: [Foundation.NSAttributedString.Key : Any]? = nil) -> Foundation.NSMutableAttributedString
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CarouselView : UIKit.UIView, UIKit.UICollectionViewDelegate, PayPalCheckout.ViewModelView, PayPalCheckout.ContentView, Swift.Identifiable, PayPalCheckout.StaticIdentifiable {
  public var id: Swift.String {
    get
  }
  public func desiredHeight(forWidth availableWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  public var isVisible: Swift.Bool {
    get
  }
  @objc deinit
  @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc override dynamic public func layoutSubviews()
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc public func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView)
  public typealias ID = Swift.String
}
public enum ContentSection : Swift.String, Swift.Identifiable {
  case header
  case main
  case footer
  public var id: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias ID = Swift.String
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias ContentConstrainer = (UIKit.UIView, PayPalCheckout.ContentPage) -> [UIKit.NSLayoutConstraint]
public protocol ContentView : AnyObject, PayPalCheckout.StaticIdentifiable {
  typealias AnimatingEvent = (PayPalCheckout.HeightChange, Swift.Bool, Foundation.TimeInterval) -> Swift.Void
  var id: Swift.String { get }
  @available(*, deprecated, message: "`desiredHeight` is replaced by `desiredHeight(forWidth:)`")
  var desiredHeight: CoreGraphics.CGFloat { get }
  var isVisible: Swift.Bool { get }
  var contentView: UIKit.UIView { get }
  var contentConstraints: PayPalCheckout.ContentConstrainer { get }
  var isPaysheetRow: Swift.Bool { get }
  var fadeOnPageChange: Swift.Bool { get }
  var willChangeHeightAnimation: Self.AnimatingEvent? { get }
  var changingHeightAnimation: Self.AnimatingEvent? { get }
  var didChangeHeightAnimation: Self.AnimatingEvent? { get }
  func desiredHeight(forWidth availableWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  func willChangeHeight(with update: PayPalCheckout.PageHeightUpdate)
  func changingHeight(with update: PayPalCheckout.PageHeightUpdate)
  func didChangeHeight(with update: PayPalCheckout.PageHeightUpdate)
}
extension ContentView {
  public var id: Swift.String {
    get
  }
  public var contentConstraints: PayPalCheckout.ContentConstrainer {
    get
  }
  public var isPaysheetRow: Swift.Bool {
    get
  }
  public var fadeOnPageChange: Swift.Bool {
    get
  }
  public var willChangeHeightAnimation: Self.AnimatingEvent? {
    get
  }
  public var changingHeightAnimation: Self.AnimatingEvent? {
    get
  }
  public var didChangeHeightAnimation: Self.AnimatingEvent? {
    get
  }
  public func desiredHeight(forWidth availableWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  public func willChangeHeight(with update: PayPalCheckout.PageHeightUpdate)
  public func changingHeight(with update: PayPalCheckout.PageHeightUpdate)
  public func didChangeHeight(with update: PayPalCheckout.PageHeightUpdate)
}
extension ContentView where Self : UIKit.UIView {
  public var desiredHeight: CoreGraphics.CGFloat {
    get
  }
  public var contentView: UIKit.UIView {
    get
  }
  public var isVisible: Swift.Bool {
    get
  }
  public var visibilityDidChange: Swift.Bool {
    get
  }
}
extension ContentView where Self : UIKit.UIViewController {
  public var contentView: UIKit.UIView {
    get
  }
  public var isVisible: Swift.Bool {
    get
  }
}
public protocol Masking {
  var maskFormat: Swift.String? { get }
  var unmaskedValue: Swift.String? { get }
}
public struct StringMask : Swift.Equatable {
  public init(mask: Swift.String)
  public static func == (lhs: PayPalCheckout.StringMask, rhs: PayPalCheckout.StringMask) -> Swift.Bool
  public mutating func mask(string: Swift.String?, endOfMask: (() -> Swift.Void)? = nil) -> Swift.String?
  public func unmask(string: Swift.String?) -> Swift.String?
  public mutating func formattedString(text: Swift.String?) -> Swift.String?
  public static func standardMask(for length: Swift.Int) -> Swift.String
}
public protocol ThreeDSJwtSpecification {
  var jwtIssuer: Swift.String { get }
  var jwtOrgUnitId: Swift.String { get }
  var type: Swift.String? { get }
  var jwtDuration: Swift.String { get }
}
public protocol ThreeDSDeviceDataCollectionURL {
  var href: Foundation.URL? { get }
}
public protocol ThreeDSContingencyContextData {
  var source: PayPalCheckout.ThreeDSContingencySourceType? { get }
  var reason: PayPalCheckout.ThreeDSContingencyReasonType? { get }
  var referenceId: Swift.String { get }
  var deviceDataCollectionUrl: PayPalCheckout.ThreeDSDeviceDataCollectionURL? { get }
  var jwtSpecification: PayPalCheckout.ThreeDSJwtSpecification? { get }
}
public protocol ThreeDSPaymentCardData {
  var id: Swift.String? { get }
  var type: PayPalCheckout.CardIssuer { get }
  var number: Swift.String? { get }
  var encryptedNumber: Swift.String { get }
  var bankIdentificationNumber: Swift.String? { get }
  var billingAddress: PayPalCheckout.ShippingAddress? { get }
  var expireYear: Swift.String? { get }
  var expireMonth: Swift.String? { get }
  var currencyCode: Swift.String? { get }
  var cardProductClass: PayPalCheckout.FundingInstrumentSubType? { get }
  var partialFpan: Swift.Bool { get }
}
public protocol ThreeDSResolution {
  var type: Swift.String? { get }
  var resolutionName: Swift.String { get }
  var paymentCard: PayPalCheckout.ThreeDSPaymentCardData? { get }
  var contingencyContext: PayPalCheckout.ThreeDSContingencyContextData? { get }
}
public protocol ThreeDomainSecureResolutionContingency {
  var name: Swift.String? { get }
  var causeName: Swift.String { get }
  var resolution: PayPalCheckout.ThreeDSResolution? { get }
}
public protocol ThreeDomainSecureContingency {
  var status: PayPalCheckout.APICallStatus? { get }
  var encryptedId: Swift.String { get }
  var redirectUrl: PayPalCheckout.ThreeDSGenericURL? { get }
  var method: PayPalCheckout.HTTPMethod? { get }
  var parameter: Swift.String? { get }
  var experience: PayPalCheckout.ThreeDSPaymentExperience? { get }
  var requestParams: [Swift.String : Swift.String] { get }
}
public enum NetworkInputType {
  case mapped
  case ordered
  case unknown
  public static func == (a: PayPalCheckout.NetworkInputType, b: PayPalCheckout.NetworkInputType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol NetworkInput : AnyObject {
  var inputType: PayPalCheckout.NetworkInputType { get }
}
extension NetworkInput {
  public var inputType: PayPalCheckout.NetworkInputType {
    get
  }
}
@_hasMissingDesignatedInitializers public class ContentRouter {
  public typealias PageChangeHandler = (PayPalCheckout.ContentPage, PayPalCheckout.ContentPage) -> Swift.Void
  public var currentPage: PayPalCheckout.ContentPage {
    get
  }
  public var pages: [PayPalCheckout.ContentPage] {
    get
    set
  }
  public subscript(index: PayPalCheckout.StaticIdentifier) -> PayPalCheckout.ContentPage {
    get
    set(newPage)
  }
  @objc deinit
  public func presentPage(_ pageId: PayPalCheckout.StaticIdentifier)
  public func presentPreviousPage(offset: Swift.Int = 0)
  public func updatePage()
}
public typealias WebExperienceCompletion = (PayPalCheckout.WebRoute) -> Swift.Void
public typealias WebSocketAuthentication = (Swift.String) -> Swift.Void
public typealias OnApproveRTDBMessageClosure = (PayPalCheckout.OnApprove) -> Swift.Void
public typealias OnCancelRTDBMessageClosure = (PayPalCheckout.OnCancel) -> Swift.Void
public typealias OnErrorRTDBMessageClosure = (PayPalCheckout.OnError) -> Swift.Void
public typealias OnFallbackRTDBMessageClosure = (Swift.String) -> Swift.Void
public typealias OnInitRTDBMessageClosure = () -> Swift.Void
public typealias ProcessConfigurator = (PayPalCheckout.CheckoutProcesses) -> Swift.Void
public typealias PageConfigurator = (PayPalCheckout.ContentRouter) -> Swift.Void
public enum PresentationMode {
  case modal
  case embedded
  public static let `default`: PayPalCheckout.PresentationMode
  public static func == (a: PayPalCheckout.PresentationMode, b: PayPalCheckout.PresentationMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias CheckoutProcessItem = PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback
public protocol CheckoutProcess {
  func index(of itemType: PayPalCheckout.CheckoutProcessItem.Type) -> Swift.Int?
  func append(_ item: PayPalCheckout.CheckoutProcessItem)
  func insert(_ item: PayPalCheckout.CheckoutProcessItem, at index: Swift.Int)
  func remove(at index: Swift.Int) -> PayPalCheckout.CheckoutProcessItem
}
public protocol CheckoutProcesses {
  var startup: PayPalCheckout.CheckoutProcess { get }
  var authentication: PayPalCheckout.CheckoutProcess { get }
  var finishing: PayPalCheckout.CheckoutProcess { get }
  var shutdown: PayPalCheckout.CheckoutProcess { get }
  var webShutdown: PayPalCheckout.CheckoutProcess { get }
  var logout: PayPalCheckout.CheckoutProcess { get }
  var error: PayPalCheckout.CheckoutProcess { get }
}
public typealias ExtendedConfig = PayPalCheckout.ExtendedCheckoutConfig
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ExtendedCheckoutConfig : PayPalCheckout.CheckoutConfig {
  public typealias AnalyticsEventCallback = (PayPalCheckout.FPTIEvent) -> Swift.Void
  public typealias AnalyticsEntryCallback = (PayPalCheckout.FPTIEntry) -> Swift.Void
  public typealias SCAContextID = Swift.String
  public typealias SCAContingencyCallback = (PayPalCheckout.ExtendedCheckoutConfig.SCAContextID, @escaping ((PayPalCheckout.SCAStepUpResponse) -> Swift.Void)) -> Swift.Void
  public typealias AddCardStepUpCallback = (@escaping (PayPalCheckout.AuthToken?, Swift.Error?) -> Swift.Void) -> Swift.Void
  public typealias ResolveContingenciesCallback = (PayPalCheckout.Contingencies, PayPalCheckout.CheckoutSessionFlags?, @escaping (PayPalCheckout.ResolveContingenciesResponse) -> Swift.Void) -> Swift.Void
  public var networkOperations: [PayPalCheckout.NetworkOperation]
  @available(*, deprecated, message: "Use the backgrounds member to define BackgroundConfigs")
  public var brandedBackgroundCheckoutConfig: PayPalCheckout.BrandedBackgroundConfig? {
    get
    set
  }
  public var backgroundConfigs: [PayPalCheckout.BackgroundConfig]
  @objc public var sessionUID: Swift.String?
  @objc public var buttonSessionID: Swift.String?
  @objc public var stickinessID: Swift.String?
  @objc public var pageUrl: Swift.String?
  @objc public var facilitatorClientID: Swift.String?
  @objc public var domain: Swift.String?
  public var fundingSource: PayPalCheckout.FundingProvider
  @objc public var enableFunding: [Swift.String]
  @objc public var channel: PayPalCheckout.Channel
  @objc public var appGuid: Swift.String?
  @objc public var deviceId: Swift.String?
  public var configureProcess: PayPalCheckout.ProcessConfigurator?
  public var configureView: PayPalCheckout.PageConfigurator?
  public var presentationMode: PayPalCheckout.PresentationMode
  public var externalLogs: [PayPalCheckout.ExternalTracking]?
  @objc public var skipsShippingAddressContingency: Swift.Bool
  @objc public var supportsBillingAgreements: Swift.Bool
  @objc public var supportsWebFallbacks: Swift.Bool
  @objc public var elmoExperimentsToSkip: [Swift.String]?
  @objc public var usesFirebase: Swift.Bool {
    @objc get
  }
  public var onAnalyticsEvent: PayPalCheckout.ExtendedCheckoutConfig.AnalyticsEventCallback?
  public var onAnalyticsEntry: PayPalCheckout.ExtendedCheckoutConfig.AnalyticsEntryCallback?
  public var onSCAContingency: PayPalCheckout.ExtendedCheckoutConfig.SCAContingencyCallback?
  @objc public var onAddCardStepUp: PayPalCheckout.ExtendedCheckoutConfig.AddCardStepUpCallback?
  public var onResolveContingencies: PayPalCheckout.ExtendedCheckoutConfig.ResolveContingenciesCallback?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MoveToErrorPageStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.MoveToErrorPageStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
public enum NetworkActionType : Swift.CaseIterable {
  case Inbound
  case Outbound
  case InboundOutbound
  case ActionBlock
  public static func == (a: PayPalCheckout.NetworkActionType, b: PayPalCheckout.NetworkActionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PayPalCheckout.NetworkActionType]
  public static var allCases: [PayPalCheckout.NetworkActionType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ImageAlignment : Swift.OptionSet {
  public typealias RawValue = Swift.Int
  public let rawValue: PayPalCheckout.ImageAlignment.RawValue
  public static let start: PayPalCheckout.ImageAlignment
  public static let end: PayPalCheckout.ImageAlignment
  public static let top: PayPalCheckout.ImageAlignment
  public static let bottom: PayPalCheckout.ImageAlignment
  public static let centerX: PayPalCheckout.ImageAlignment
  public static let centerY: PayPalCheckout.ImageAlignment
  public static let center: PayPalCheckout.ImageAlignment
  public static let all: [PayPalCheckout.ImageAlignment]
  public init(rawValue: PayPalCheckout.ImageAlignment.RawValue)
  public typealias ArrayLiteralElement = PayPalCheckout.ImageAlignment
  public typealias Element = PayPalCheckout.ImageAlignment
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CarouselCell : UIKit.UICollectionViewCell, PayPalCheckout.ContentView {
  public func desiredHeight(forWidth availableWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @objc deinit
  @objc override dynamic public func prepareForReuse()
  @objc override dynamic public func hitTest(_ point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
}
@objc(PPCOrderRequest) @objcMembers public class OrderRequest : ObjectiveC.NSObject, Swift.Encodable {
  @objc final public let intent: PayPalCheckout.OrderIntent
  final public let processingInstruction: PayPalCheckout.ProcessingInstruction?
  @objc final public let payer: PayPalCheckout.OrderPayer?
  @objc final public let purchaseUnits: [PayPalCheckout.PurchaseUnit]
  @objc final public let applicationContext: PayPalCheckout.OrderApplicationContext?
  @objc public init(intent: PayPalCheckout.OrderIntent, purchaseUnits: [PayPalCheckout.PurchaseUnit], processingInstruction: PayPalCheckout.ProcessingInstruction = .none, payer: PayPalCheckout.OrderPayer? = nil, applicationContext: PayPalCheckout.OrderApplicationContext? = nil)
  @objc deinit
  @objc override dynamic public init()
  public func encode(to encoder: Swift.Encoder) throws
}
final public class CheckDuplicateSessionStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  public init()
  override final public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.CheckDuplicateSessionStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
public typealias CheckoutStrings = PayPalCheckout.I18n
public enum I18n {
  @PayPalCheckout.L10n public static var addAnAddress: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var addCardCardNumberCollapsed: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var addCardCardNumberExpanded: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var addCardExpirationDate: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var addCardSecurityCode: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var addCardZipCode: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var addManually: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var address: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var addressLine1: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var addressLine2: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var additionalInformation: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var backButton: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var balanceCurrencyDisallowedAlert: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var balanceMissing: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var balanceUseYourCurrency: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var billingAuthorizationHeaderText: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var billingAuthorizationHeaderTextEU: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var billingAuthorizationInfo: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var billingSavePaymentInfoDescription: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var billingSavePaymentInfoDescriptionEU: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var billingUseBalanceMessage: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var billingWithPurchaseAuthorizationDescription: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var billingWithPurchaseAuthorizationDescriptionEU: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var billingWithPurchaseUseBalanceForTransaction: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var billingWithoutPurchaseAuthorizationDescription: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var billingWithoutPurchaseAuthorizationDescriptionEU: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var bnplApplyForpayIn4: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var bnplApplyForPayPalCredit: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var bnplApplyNow: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var bnplContinueToApplication: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var bnplCreditApprovalTerms: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var bnplNoInterest: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var bnplNoInterestDynamic: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var bnplPayLater: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var bnplPayOverTime: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var bnplPayOverTimeDynamic: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var bnplPaymentMethodRightsAndPolicies: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var bnplPI4InterestFreePaymentsDynamic: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var bnplSeeTerms: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var bnplSubjectToCreditApproval: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var bnplTakeYouToPayPalToApply: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var buildingNameFloorRoomNumber: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var cancelCheckoutAlertTitle: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var cancelCheckoutAlertMessage: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var cancelCheckoutAlertButtonConfirm: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var cancelCheckoutAlertButtonDismiss: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var canton: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var capitalProvince: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var cep: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var centerOfPopulationCityVillage: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var city: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var cityDeliveryPostOffice: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var cityNeighbordhood: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var citySuburb: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var cityTown: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var cityTownLocality: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var cityTownVillage: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var cityWardTownVillage: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var companyPoliciesTitleLabel: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var companyPolicyTitle: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var companyPrivacyTitleLabel: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var companyTermsTitleLabel: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var companyViewPaymentRights: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var companyViewRightsPart1: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var companyViewRightsPart2: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var complianceConversionRate: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var complianceConversionRateCouldChange: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var complianceGotIt: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var complianceIfDoesNotWorkUseAnother: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var complianceIfLowBalanceChargeAnother: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var complianceLearnMore: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var compliancePayInCurrencyUsingCardIssuerConversion: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var complianceRateProtectionDescriptionLong: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var complianceRateProtectionDescriptionShort: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var complianceRateProtectionInfo: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var complianceRateProtectionQuestion: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var complianceSeeMore: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var complianceUseCurrency: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var communeLocality: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var conversionCurrencyConversionSpread: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var conversionCurrencyForThisPurchaseTitle: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var conversionPayPalConversionRateLabel: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var conversionPayPalConversionRateNoParam: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var conversionSeeConversionOptionsLabel: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var conversionTotalBeforeCardIssuerConversion: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var conversionTotalBeforeConverting: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var conversionTotalBeforeConvertingWithParam: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var conversionYouWillPay: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var conversionYouWillPayWithParam: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var convertWithCardIssuer: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var country: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var county: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var countyDublinPostalDistrict: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var conversionConvertWithCardIssuerPrompt: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var department: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var departmentCapitalDistrict: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var details: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var dialogAddCard: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var dialogAddShippingAddress: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var dialogCancel: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var dialogContinueToWeb: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var dialogOk: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var district: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var districtArea: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var districtDependency: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var districtParish: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var districtSubProvince: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var doubleTapToToggle: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var emirate: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var errorMessageAddCardProcessor: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var errorMessageGenericValidation: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var errorMessageTitle: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var errorMessageSubTitle: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var errorMessageCompleteCardNumber: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var errorMessageExpirationDate: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var errorMessageCSC: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var errorMessageZipCode: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var errorMessageGeneric: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var exitSurveyTitle: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var exitSurveySubTitle: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var exitSurveyChangeOrderLabel: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var exitSurveyHelpUsDoBetterLabel: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var exitSurveyIPreferNotToSay: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var exitSurveySomethingsNotRightLabel: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var exitSurveyChangeOrderLabelInEN: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var exitSurveyIPreferNotToSayInEN: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var exitSurveySomethingsNotRightLabelInEN: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var exitSurveyWhatsWrongInputMessage: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var fundingInstrumentAddCardButton: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var fundingInstrumentAddCard: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var fundingInstrumentApplyNowButton: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var fundingInstrumentBankLabel: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var fundingInstrumentBalanceLabel: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var fundingInstrumentCheckingLabel: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var fundingInstrumentCreditLabel: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var fundingInstrumentDebitLabel: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var fundingInstrumentExpired: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var fundingInstrumentPreferred: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var fundingInstrumentPrepaidLabel: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var fundingInstrumentSavingsLabel: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var fundingInstrumentUpdateCard: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var fundingSelectorCarouselNo: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var fundingSelectorCarouselYes: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var invalidCharacters: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var invalidCardNumber: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var invalidExpirationDate: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var invalidExpirationMonth: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var invalidExpirationYear: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var invalidShippingAddress: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var invalidLine2Address: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var invalidCity: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var invalidState: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var invalidPostcode: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var islandsName: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var judetSector: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var keyboardActionDone: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var largerCityProvince: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var locality: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var logoutCheckout: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var mainVillageTown: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var moreAdditionalDetails: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var navigationContinueButton: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var navigationLogoutButton: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var navigationReviewOrderButton: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var navigationAgreeAndContinueButton: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var neighborhoodQuarter: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var off: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var on: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var overcaptureCollapsedText: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var overcaptureExpandedShort: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var overcaptureExpandedLong: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paymentButtonCheckoutLabel: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paymentButtonBuyNowLabel: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paymentButtonPayWithLabel: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paymentButtonPayLaterLabel: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paymentMethodRights: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paypalUserAgreement: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetCompleteOrder: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetLoginLoggingInMessage: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetLoginHiUser: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetLoginWelcomeSlogan: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetPadBuyNowPayLater: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetPadNoInterestOrFees: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetPadPayAfterDays: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetPadWellDebit: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetPadYouAgreeToTerms: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetPayInWithCurrency: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetPayNowHandling: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetPayNowInsurance: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetPayNowItemDescription: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetPayNowItemPrice: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetPayNowItemTotal: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetPayNowQuantity: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetPayNowShippingAndHandling: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetPayNowShippingDiscount: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetPayNowTax: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetPayNowTotal: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetPayNow: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetShippingShipTo: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var paysheetFinishingUp: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var plotHouseNumberMooLaneAndStreetName: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var poBox: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var postcode: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var postCode: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var postalCode: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var postOfficeName: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var poweredByGoogle: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var prefecture: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var profilePageLegalTitle: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var province: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var provinceAutonomousCity: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var provinceMunicipality: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var provinceNationalDistrict: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var provinceRegion: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var region: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var regionIndependentCity: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var save: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var searchCountry: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var shippingAddNewShippingAddress: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var shippingAddShippingAddress: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var shippingAddAnAddress: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var shippingAlphabeticallySort: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var shippingByDistanceSort: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var shippingChooseANewAddress: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var shippingChooseAShippingAddress: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var shippingMerchantCantShipToAddress: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var shippingMethod: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var shippingMethodLoading: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var shippingPickItUp: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var shippingPickupOptionsForZipCode: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var shippingPickupSubtitle: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var shippingRecentlyUsedSort: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var shippingShipIt: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var shippingShippingAddressTitle: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var shippingPickupMethodTitle: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var shippingUnavailable: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var shutdown1: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var shutdown2: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var snackBarCardAdded: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var snackbarEscapeButton: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var snackbarOnboardingText: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var startTypingShippingAddress: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var startup1: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var startup2: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var startup3: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var state: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var stateCapital: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var stateCapitalDistrictFederalDependencies: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var stateFederalTerritories: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var stateTerritory: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var streetAddress: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var streetBuildingApartment: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var streetNameAndHouseNumber: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var streetNameStreetNumber: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var subDistrictSubDivision: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var subLocality: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var threeDSErrorMessageExtraFI: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var threeDSErrorMessageNoExtraFI: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var threeDSErrorMessageGeneric: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var threeDSHeaderText: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var threeDSNavigationNextButton: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var threeDSNoCardinalSDKWebFallbackPrompt: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var threeDSResendCodeButton: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var threeDSSubmitButton: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var threeDSLoadingText: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var threeDSUnconfirmedText: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var threeDSUnconfirmedHeader: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var threeDSMessageButtonText: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var tooFewCharacters: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var tooManyCharacters: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var town: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var townCity: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var townVillagePostOffice: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var vaultPaymentMethod: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var vaultTakeYouToPayPal: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var voiceOverErrorPrompt: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var webFallbackNotSupportedAlertActionTitle: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var webFallbackNotSupportedAlertTitle: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var yourProfile: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var expandListOfCartItems: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var collapseListOfCartItems: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var totalAmount: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var zipCode: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var zone: Swift.String {
    get
  }
  @PayPalCheckout.L10n public static var zoneCapital: Swift.String {
    get
  }
}
public protocol AlignableImageView : UIKit.UIImageView, PayPalCheckout.ContentView {
  var insets: UIKit.UIEdgeInsets { get set }
  var imageAlignment: PayPalCheckout.ImageAlignment { get set }
}
extension AlignableImageView {
  public var contentConstraints: PayPalCheckout.ContentConstrainer {
    get
  }
}
@propertyWrapper public struct L10n {
  public init(wrappedValue value: Swift.String, language: Swift.String? = nil, _ comment: Swift.String = "")
  public var wrappedValue: Swift.String {
    get
  }
}
public struct ExternalTrackingProperty {
  public init(_ key: Swift.String, _ value: Swift.String)
  public init(_ key: Swift.String, _ value: Swift.Int)
  public init(_ key: Swift.String, _ value: Swift.Double)
  public init(_ key: Swift.String, _ value: Swift.Float)
  public init(_ key: Swift.String, _ value: Swift.Bool)
}
public enum Analytics {
}
@_hasMissingDesignatedInitializers @objc(PPCVaultData) @objcMembers public class VaultData : ObjectiveC.NSObject {
  @objc final public let approvalSessionID: Swift.String
  @objc final public let approvalTokenID: Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@objc(PPCPaymentButtonContainerDelegate) public protocol PaymentButtonContainerDelegate {
  @objc func onLoading()
  @objc func onFinish(fundingEligibilityState: PayPalCheckout.PaymentFundingEligibilityState?, error: Swift.Error?)
}
public struct OnApprove : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class EnvironmentConfig : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc deinit
  @objc public var checksEligibility: Swift.Bool
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc(PPCCaptureActionSuccess) @objcMembers public class CaptureActionSuccess : ObjectiveC.NSObject {
  @objc final public let data: PayPalCheckout.OrderActionData
  @objc deinit
  @objc override dynamic public init()
}
public typealias PaysheetContainerContentDeducer = (Swift.AnyHashable, PayPalCheckout.ContentPage) -> [PayPalCheckout.ContentView]
@objc open class Background : UIKit.UIView, PayPalCheckout.StaticIdentifiable {
  public typealias Animation = (@escaping () -> Swift.Void) -> Swift.Void
  public typealias AnimationCompletion = (@escaping (UIKit.UIViewAnimatingPosition) -> Swift.Void) -> Swift.Void
  public var staticId: PayPalCheckout.StaticIdentifier {
    get
  }
  public static var id: PayPalCheckout.StaticIdentifier {
    get
  }
  open var availableHeight: CoreGraphics.CGFloat
  open var cornerHeight: CoreGraphics.CGFloat
  open var shouldPassthroughTouches: Swift.Bool
  open var contentViews: [UIKit.UIView] {
    get
    set
  }
  @objc dynamic public init()
  @available(*, unavailable)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  open func willChangeHeight(_ change: PayPalCheckout.HeightChange, duration: Foundation.TimeInterval, animation: @escaping PayPalCheckout.Background.Animation, animationCompletion: @escaping PayPalCheckout.Background.AnimationCompletion)
  open func changingHeight(_ change: PayPalCheckout.HeightChange, duration: Foundation.TimeInterval, animation: @escaping PayPalCheckout.Background.Animation, animationCompletion: @escaping PayPalCheckout.Background.AnimationCompletion)
  open func didChangeHeight(_ change: PayPalCheckout.HeightChange, duration: Foundation.TimeInterval, animation: @escaping PayPalCheckout.Background.Animation, animationCompletion: @escaping PayPalCheckout.Background.AnimationCompletion)
  open func changingPage(from old: PayPalCheckout.ContentPage?, to new: PayPalCheckout.ContentPage)
  @objc deinit
  @objc override dynamic open func hitTest(_ point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
@objc(PPCEnvironment) public enum Environment : Swift.Int, Swift.CaseIterable {
  case live
  case sandbox
  case stage
  public static var stageURL: Swift.String
  public var name: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PayPalCheckout.Environment]
  public typealias RawValue = Swift.Int
  public static var allCases: [PayPalCheckout.Environment] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class JWTStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.JWTStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
@objc(PPCChannel) public enum Channel : Swift.Int, Swift.CaseIterable, Swift.CustomStringConvertible {
  case native
  case mobileWeb
  case desktopWeb
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PayPalCheckout.Channel]
  public typealias RawValue = Swift.Int
  public static var allCases: [PayPalCheckout.Channel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc(PPCShippingType) public enum ShippingType : Swift.Int, Swift.CaseIterable, Swift.Codable {
  case shipping
  case pickup
  case none
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PayPalCheckout.ShippingType]
  public typealias RawValue = Swift.Int
  public static var allCases: [PayPalCheckout.ShippingType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
public protocol PaymentButtonDelegate : AnyObject {
  func onButtonStart(_ button: PayPalCheckout.PaymentButton)
  func onButtonFinish(_ button: PayPalCheckout.PaymentButton)
  func button(_ button: PayPalCheckout.PaymentButton, changedEligibilityStatus status: PayPalCheckout.PaymentButtonEligibilityStatus)
}
public enum SharedUI {
}
open class Step<Context> : Swift.Identifiable, Swift.CustomStringConvertible {
  public typealias Next = PayPalCheckout.SequenceProcessor<Context>.Next
  public var context: Context?
  public var name: Swift.String?
  public var id: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public init(context: Context? = nil, name: Swift.String? = nil, _ function: ((Context?, PayPalCheckout.Step<Context>.Next?) -> Swift.Void)? = nil)
  open func execute(context: Context?, completion: PayPalCheckout.Step<Context>.Next?)
  @objc deinit
  public typealias ID = Swift.String
}
public enum LogLevel : Swift.Int {
  case info
  case error
  case log
  case warn
  case trace
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class LogoutStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.LogoutStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
@objc(PPCApprovalOrderIntent) public enum ApprovalOrderIntent : Swift.Int {
  case none
  case capture
  case authorize
  case order
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum WebRoute : Swift.CustomStringConvertible {
  case addCard, addShippingAddress, credit, payLater, vault
  case custom(url: Foundation.URL)
  case fallback(type: PayPalCheckout.FallbackType)
  public var description: Swift.String {
    get
  }
}
public protocol FirebaseCallbacks {
  var authenticateWebSocketWithAccessToken: PayPalCheckout.WebSocketAuthentication? { mutating get set }
  var onApproveRTDBMessageClosure: PayPalCheckout.OnApproveRTDBMessageClosure? { mutating get set }
  var onCancelRTDBMessageClosure: PayPalCheckout.OnCancelRTDBMessageClosure? { mutating get set }
  var onErrorRTDBMessageClosure: PayPalCheckout.OnErrorRTDBMessageClosure? { mutating get set }
  var onFallbackRTDBMessageClosure: PayPalCheckout.OnFallbackRTDBMessageClosure? { mutating get set }
  var onInitRTDBMessageClosure: PayPalCheckout.OnInitRTDBMessageClosure? { mutating get set }
}
extension Checkout {
  public struct CustomizableFirebaseCallbacks : PayPalCheckout.FirebaseCallbacks {
    public var authenticateWebSocketWithAccessToken: PayPalCheckout.WebSocketAuthentication? {
      mutating get
      set
    }
    public var onApproveRTDBMessageClosure: PayPalCheckout.OnApproveRTDBMessageClosure? {
      mutating get
      set
    }
    public var onCancelRTDBMessageClosure: PayPalCheckout.OnCancelRTDBMessageClosure? {
      mutating get
      set
    }
    public var onErrorRTDBMessageClosure: PayPalCheckout.OnErrorRTDBMessageClosure? {
      mutating get
      set
    }
    public var onFallbackRTDBMessageClosure: PayPalCheckout.OnFallbackRTDBMessageClosure? {
      mutating get
      set
    }
    public var onInitRTDBMessageClosure: PayPalCheckout.OnInitRTDBMessageClosure? {
      mutating get
      set
    }
    public init()
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CurrencyConversionOptionPage : PayPalCheckout.ContentPage {
  override public var headerAccessibilityElements: [Any]? {
    get
  }
  @objc deinit
}
public enum AddressValidationResult {
  case valid
  case invalid([PayPalCheckout.AddressValidationError])
}
public enum ResolveContingenciesResponse {
  case success
  case failure(error: Swift.Error?)
}
public protocol Address {
  var line1: Swift.String? { get }
  var line2: Swift.String? { get }
  var city: Swift.String? { get }
  var state: Swift.String? { get }
  var country: Swift.String? { get }
  var postalCode: Swift.String? { get }
  var fullAddress: Swift.String { get }
}
public protocol CartAddress : PayPalCheckout.Address {
  var firstName: Swift.String? { get }
  var lastName: Swift.String? { get }
  var line1: Swift.String? { get }
  var line2: Swift.String? { get }
  var city: Swift.String? { get }
  var state: Swift.String? { get }
  var country: Swift.String? { get }
  var postalCode: Swift.String? { get }
  var fullAddress: Swift.String { get }
}
public protocol ShippingAddress : PayPalCheckout.Address {
  var addressID: Swift.String? { get }
  var fullName: Swift.String? { get }
  var isPrimary: Swift.Bool { get }
  var isSelected: Swift.Bool { get }
  var isDefault: Swift.Bool { get }
  var isInvalid: Swift.Bool { get }
  var isDisabled: Swift.Bool { get }
}
public protocol UserAddress : PayPalCheckout.Address {
  var addressId: Swift.String? { get }
  var isSelected: Swift.Bool? { get }
  var isPrimary: Swift.Bool? { get }
  var isDefaultBilling: Swift.Bool? { get }
  var type: PayPalCheckout.AddressType? { get }
}
public enum AddressType : Swift.String, Swift.Codable {
  case business
  case dropOff
  case gift
  case homeOrWork
  case prior
  case profile
  case shipping
  case verisign
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(PPCheckout) @objcMembers final public class Checkout : ObjectiveC.NSObject, PayPalCheckout.StaticIdentifiable {
  @objc(sdkVersion) public static var version: Swift.String {
    @objc get
  }
  @objc public static var userAction: PayPalCheckout.UserAction {
    @objc get
  }
  @objc public static var showsExitAlert: Swift.Bool
  @objc public static var showsExitSurvey: Swift.Bool
  @objc deinit
  @objc public static func setCreateOrderCallback(_ createOrder: @escaping PayPalCheckout.CheckoutConfig.CreateOrderCallback)
  @objc public static func setOnApproveCallback(_ onApprove: @escaping PayPalCheckout.CheckoutConfig.ApprovalCallback)
  @objc public static func setOnShippingChangeCallback(_ onShippingChange: @escaping PayPalCheckout.CheckoutConfig.ShippingChangeCallback)
  @objc public static func setOnCancelCallback(_ onCancel: @escaping PayPalCheckout.CheckoutConfig.CancelCallback)
  @objc public static func setOnErrorCallback(_ onError: @escaping PayPalCheckout.CheckoutConfig.ErrorCallback)
  @objc(setConfig:) public static func set(config: PayPalCheckout.CheckoutConfig)
  @objc(setCurrencyCode:) public static func setCurrencyCode(_ currency: PayPalCheckout.CurrencyCode)
  @objc(startWithPresentingViewController:createOrder:onApprove:onShippingChange:onCancel:onError:) public static func start(presentingViewController: UIKit.UIViewController? = nil, createOrder: PayPalCheckout.CheckoutConfig.CreateOrderCallback? = nil, onApprove: PayPalCheckout.CheckoutConfig.ApprovalCallback? = nil, onShippingChange: PayPalCheckout.CheckoutConfig.ShippingChangeCallback? = nil, onCancel: PayPalCheckout.CheckoutConfig.CancelCallback? = nil, onError: PayPalCheckout.CheckoutConfig.ErrorCallback? = nil)
  public static func addShippingAddress(givenName: Swift.String, familyName: Swift.String, address: PayPalCheckout.Address, completion: ((Swift.Result<PayPalCheckout.UserCheckoutResult, PayPalCheckout.RequestError>) -> Swift.Void)? = nil)
  @available(*, deprecated, message: "Use the new Checkout.changeShipping function")
  public static func changeShippingAddress(to address: PayPalCheckout.ShippingAddress)
  public static func changeShipping(shippingAddress: PayPalCheckout.ShippingAddress? = nil, shippingMethod: PayPalCheckout.ShippingMethod? = nil)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class WebViewPage : PayPalCheckout.ContentPage {
  @objc deinit
}
public protocol FIModelBase {
  var image: UIKit.UIImage? { get }
  var preferred: Swift.Bool { get }
  var data: PayPalCheckout.FundingOption? { get }
  var allowsPreferred: Swift.Bool { get }
  var buttonCTADescriptor: PayPalCheckout.ButtonStateKey { get }
  var allowsCurrencyConversion: Swift.Bool { get }
}
public enum ResponderStatus {
  case began
  case resigned
  public static func == (a: PayPalCheckout.ResponderStatus, b: PayPalCheckout.ResponderStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DeliverySelectionPage : PayPalCheckout.ContentPage {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MoveToHomepageStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.MoveToHomepageStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
public protocol ActionableRow {
  func shouldSelectRow() -> Swift.Bool
  func didSelectRow()
}
extension ActionableRow {
  public func shouldSelectRow() -> Swift.Bool
}
public enum EventTypeData {
  case gqlPayload(Swift.Result<PayPalCheckout.UserCheckoutResult, Swift.Error>)
  case gqlSessionCart(PayPalCheckout.Cart?)
  case uiPageWillChange(oldPage: PayPalCheckout.ContentPage?, newPage: PayPalCheckout.ContentPage?)
  case uiPageIsChanging(oldPage: PayPalCheckout.ContentPage?, newPage: PayPalCheckout.ContentPage?)
  case uiPageDidChange(oldPage: PayPalCheckout.ContentPage?, newPage: PayPalCheckout.ContentPage?)
  case uiCurrencyConversionChanged(Swift.Bool)
  case uiSetCardAsPreferred(atPosition: Swift.Int)
  case uiProfilePicAvailable(Swift.Result<UIKit.UIImage, Swift.Error>)
  case openWeb(route: PayPalCheckout.WebRoute)
  case logout
  case addCard
  case updateCarouselAddCardImage(UIKit.UIImage?)
  case shippingAddressAdded(PayPalCheckout.ShippingAddress?)
  case shippingChangeStarted(PayPalCheckout.ShippingAddress?, PayPalCheckout.ShippingMethod?)
  case shippingChangeCompleted(PayPalCheckout.ShippingAddress?, PayPalCheckout.ShippingMethod?, PayPalCheckout.ShippingChangeState)
  case setNewProfileImage(UIKit.UIImage, Swift.Bool)
  case FICentered(Swift.Int, PayPalCheckout.FIModelBase)
  case FISelected(Swift.Int, PayPalCheckout.FIModelBase)
  case sdkApprovePayment(PayPalCheckout.CheckoutCompleteResult?, Swift.Error?)
  case onApproveRTDBMessage
  case onCancel
  case sdkShutdown
  case errorApprovingPayment
  case onError(Swift.Error)
  case selectedPlanChanged(PayPalCheckout.Plan)
  case toggleCartDetailsView
  case firebaseSetProps(Swift.Result<Swift.Bool, Swift.Error>)
  case openProfileLink(link: PayPalCheckout.PayPalLink)
  case nativeEligibilityUpdated(Swift.Bool)
  case duplicateTokenFound
  case duplicateButtonSessionID
  case sdkFinishing
  case createOrderSucceeded
  case errorApproving3DS
  case fiFailed3DS
  case fundingOptionsChanged(old: [PayPalCheckout.FundingOption], new: [PayPalCheckout.FundingOption])
  case paysheetDidAppear
  case paysheetWillDisappear
  case attemptNativeAddCard
  case onGenericError
  case addCardApproved
  case addCardStateUpdated(isProcessing: Swift.Bool)
  case treatmentsUpdated
  case countrySelected
  case placeDetailsUpdate(Swift.Result<PayPalCheckout.PlaceDetails, PayPalCheckout.RequestError>)
  case onCloseButtonTapped
  case keyboardWillShow(keyboardHeight: CoreGraphics.CGFloat, duration: Foundation.TimeInterval)
  case keyboardWillHide
  case cardinalNotPresent
  case billingBalanceToggled(isOn: Swift.Bool)
}
public protocol CheckoutSessionFlags {
  var allowChangePaymentMethod: Swift.Bool { get }
  var blockNonDomesticPayer: Swift.Bool { get }
  var blockNonDomesticShipping: Swift.Bool { get }
  var hideCartDetails: Swift.Bool { get }
  var hideShipping: Swift.Bool { get }
  var isBillingAddressConsentRequired: Swift.Bool { get }
  var isBillingAgreement: Swift.Bool { get }
  var isChangeShippingAddressAllowed: Swift.Bool { get }
  var isShippingAddressRequired: Swift.Bool { get }
  var isSignupEligible: Swift.Bool { get }
  var showPPCreditOffer: Swift.Bool { get }
  var setStickyBillingAllowed: Swift.Bool { get }
}
@_inheritsConvenienceInitializers @objc(PPCPatchRequest) @objcMembers public class PatchRequest : ObjectiveC.NSObject {
  @objc deinit
  @objc public func add(shippingName: PayPalCheckout.PurchaseUnit.ShippingName, referenceId: Swift.String? = nil)
  @objc public func add(shippingAddress: PayPalCheckout.OrderAddress, referenceId: Swift.String? = nil)
  @objc public func add(shippingOptions: [PayPalCheckout.ShippingMethod], referenceId: Swift.String? = nil)
  @objc public func replace(shippingName: PayPalCheckout.PurchaseUnit.ShippingName, referenceId: Swift.String? = nil)
  @objc public func replace(shippingAddress: PayPalCheckout.OrderAddress, referenceId: Swift.String? = nil)
  @objc public func replace(shippingOptions: [PayPalCheckout.ShippingMethod], referenceId: Swift.String? = nil)
  @objc public func replace(amount: PayPalCheckout.PurchaseUnit.Amount, referenceId: Swift.String? = nil)
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc(PPCPaymentButtonContainer) @objcMembers public class PaymentButtonContainer : UIKit.UIView, PayPalCheckout.PaymentButtonDelegate {
  @objc public var onCreateOrder: PayPalCheckout.CheckoutConfig.CreateOrderCallback?
  @objc public var onApproval: PayPalCheckout.CheckoutConfig.ApprovalCallback?
  @objc public var onCancel: PayPalCheckout.CheckoutConfig.CancelCallback?
  @objc public var onError: PayPalCheckout.CheckoutConfig.ErrorCallback?
  @objc public var onShippingChange: PayPalCheckout.CheckoutConfig.ShippingChangeCallback?
  @objc public init(payPalButtonUIConfiguration: PayPalCheckout.PayPalButtonUIConfiguration = .init(), payPalCreditButtonUIConfiguration: PayPalCheckout.PayPalCreditButtonUIConfiguration = .init(), payLaterButtonUIConfiguration: PayPalCheckout.PayLaterButtonUIConfiguration = .init(), delegate: PayPalCheckout.PaymentButtonContainerDelegate? = nil)
  @objc public func setup(onCreateOrder: PayPalCheckout.CheckoutConfig.CreateOrderCallback? = nil, onApproval: PayPalCheckout.CheckoutConfig.ApprovalCallback? = nil, onCancel: PayPalCheckout.CheckoutConfig.CancelCallback? = nil, onError: PayPalCheckout.CheckoutConfig.ErrorCallback? = nil, onShippingChange: PayPalCheckout.CheckoutConfig.ShippingChangeCallback? = nil)
  @objc public func configurePayPalButton(with configuration: PayPalCheckout.PayPalButtonUIConfiguration)
  @objc public func configurePayPalCreditButton(with configuration: PayPalCheckout.PayPalCreditButtonUIConfiguration)
  @objc public func configurePayLaterButton(with configuration: PayPalCheckout.PayLaterButtonUIConfiguration)
  @objc public func onButtonStart(_ button: PayPalCheckout.PaymentButton)
  @objc public func onButtonFinish(_ button: PayPalCheckout.PaymentButton)
  @objc public func button(_ button: PayPalCheckout.PaymentButton, changedEligibilityStatus status: PayPalCheckout.PaymentButtonEligibilityStatus)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
@_hasMissingDesignatedInitializers @objc(PPCBillingActionData) @objcMembers public class BillingActionData : ObjectiveC.NSObject {
  @objc final public let billingId: Swift.String
  @objc final public let state: Swift.String
  @objc final public let billingData: [Swift.String : Any]
  @objc deinit
  @objc override dynamic public init()
}
public struct FPTIEvent : Swift.Encodable, Swift.Equatable {
  public init(from: Swift.String, to: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public static let startCheckoutJS: PayPalCheckout.FPTIEvent
  public static let startCheckout: PayPalCheckout.FPTIEvent
  public static let startProgress: PayPalCheckout.FPTIEvent
  public static let ryi: PayPalCheckout.FPTIEvent
  public static let profile: PayPalCheckout.FPTIEvent
  public static let legal: PayPalCheckout.FPTIEvent
  public static let addresses: PayPalCheckout.FPTIEvent
  public static let selectAddress: PayPalCheckout.FPTIEvent
  public static let wallet: PayPalCheckout.FPTIEvent
  public static let currencyConversion: PayPalCheckout.FPTIEvent
  public static let orderSummary: PayPalCheckout.FPTIEvent
  public static let logout: PayPalCheckout.FPTIEvent
  public static func == (lhs: PayPalCheckout.FPTIEvent, rhs: PayPalCheckout.FPTIEvent) -> Swift.Bool
}
public protocol CryptocurrencyQuote {
  var id: Swift.String { get }
  var symbol: Swift.String { get }
  var totalAmount: PayPalCheckout.UnitAmount { get }
  var quantity: Swift.String { get }
  var assetPrice: PayPalCheckout.UnitAmount { get }
}
extension String {
  public var length: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> Swift.String {
    get
  }
  public func substring(fromIndex: Swift.Int) -> Swift.String
  public func substring(toIndex: Swift.Int) -> Swift.String
  public subscript(ran: Swift.Range<Swift.Int>) -> Swift.String {
    get
  }
  public func boundingHeight(forWidth: CoreGraphics.CGFloat, font: UIKit.UIFont = .preferredFont(forTextStyle: .body), options: UIKit.NSStringDrawingOptions = [.usesLineFragmentOrigin, .usesFontLeading], attributes: [Foundation.NSAttributedString.Key : Any]? = nil, context: UIKit.NSStringDrawingContext? = nil) -> CoreGraphics.CGFloat
  public func height(withConstrainedWidth width: CoreGraphics.CGFloat, font: UIKit.UIFont) -> CoreGraphics.CGFloat
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UndefinedPage : PayPalCheckout.ContentPage {
  public static var instance: PayPalCheckout.UndefinedPage
  @objc deinit
}
public struct Contingencies {
  public let causes: [Swift.String]
  public var hasShippingAddressContingency: Swift.Bool {
    get
  }
}
@objc @_hasMissingDesignatedInitializers final public class AccessibilityCloseButton : UIKit.UIView, PayPalCheckout.ContentView {
  final public func desiredHeight(forWidth availableWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  final public var contentConstraints: PayPalCheckout.ContentConstrainer {
    get
  }
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
public enum FallbackType : Swift.String {
  case checkoutResponseErrors
  case unsupportedFlow
  case completeSCAFailure
  case cancelURL
  case ineligibleTraffic
  case nonUserCancelledFlow
  case unknownCheckoutIssue
  case payTokenFailure
  case currencyConvertFailure
  case userCheckoutFailPayloadService
  case firebaseTokenFailure
  case firebaseSetPropsError
  case userCheckoutFailFinishService
  case web
  case eligibilityFailure
  case updateClientConfigFailure
  case authenticationFailure
  case nativeOptOut
  case billingWithPurchaseMultipleBalances
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct PlaceDetails : Swift.Decodable, Swift.Equatable, PayPalCheckout.Address {
  public let line1: Swift.String?
  public let line2: Swift.String?
  public let city: Swift.String?
  public let state: Swift.String?
  public let postalCode: Swift.String?
  public let country: Swift.String?
  public let fullAddress: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: PayPalCheckout.PlaceDetails, b: PayPalCheckout.PlaceDetails) -> Swift.Bool
}
public protocol User {
  var userId: Swift.String? { get }
  var givenName: Swift.String? { get }
  var familyName: Swift.String? { get }
  var fullName: Swift.String? { get }
  var email: Swift.String? { get }
  var locale: Foundation.Locale? { get }
  var imageURL: Foundation.URL? { get }
  var addresses: [PayPalCheckout.UserAddress]? { get }
}
public enum Priority : Swift.Int, Swift.Comparable {
  case low
  case normal
  case high
  public static func < (lhs: PayPalCheckout.Priority, rhs: PayPalCheckout.Priority) -> Swift.Bool
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum CurrencyConversionType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case provider
  case vendor
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayPalCheckout.CurrencyConversionType]
  public typealias RawValue = Swift.String
  public static var allCases: [PayPalCheckout.CurrencyConversionType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum CheckoutState : Swift.String, Swift.Codable, Swift.CaseIterable {
  case payable
  case approved
  case nonPayable
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayPalCheckout.CheckoutState]
  public typealias RawValue = Swift.String
  public static var allCases: [PayPalCheckout.CheckoutState] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum CheckoutSessionType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case purchase
  case billingWithPurchase
  case billingWithoutPurchase
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayPalCheckout.CheckoutSessionType]
  public typealias RawValue = Swift.String
  public static var allCases: [PayPalCheckout.CheckoutSessionType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum BillingType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case channelInitiatedBilling
  case merchantInitiatedBilling
  case merchantInitiatedSingleBilling
  case channelInitiatedBillingSingleAgreement
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayPalCheckout.BillingType]
  public typealias RawValue = Swift.String
  public static var allCases: [PayPalCheckout.BillingType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum APICallStatus : Swift.String, Swift.Codable, Swift.CaseIterable {
  case success
  case failure
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayPalCheckout.APICallStatus]
  public typealias RawValue = Swift.String
  public static var allCases: [PayPalCheckout.APICallStatus] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum HTTPMethod : Swift.String, Swift.Codable, Swift.CaseIterable {
  case get
  case head
  case post
  case put
  case delete
  case connect
  case options
  case patch
  case redirect
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayPalCheckout.HTTPMethod]
  public typealias RawValue = Swift.String
  public static var allCases: [PayPalCheckout.HTTPMethod] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct PayPalLink {
}
@_inheritsConvenienceInitializers @objc(PPCPayLaterButtonUIConfiguration) @objcMembers public class PayLaterButtonUIConfiguration : ObjectiveC.NSObject {
  public typealias Color = PayPalCheckout.PayPalPayLaterButton.Color
  @objc override dynamic public init()
  @objc public init(color: PayPalCheckout.PayLaterButtonUIConfiguration.Color = .gold, attributes: PayPalCheckout.PaymentButtonAttributes = .init())
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AmountView : UIKit.UIView, PayPalCheckout.ContentView {
  public var willChangeHeightAnimation: PayPalCheckout.AmountView.AnimatingEvent?
  public var changingHeightAnimation: PayPalCheckout.AmountView.AnimatingEvent?
  public var didChangeHeightAnimation: PayPalCheckout.AmountView.AnimatingEvent?
  public var isVisible: Swift.Bool
  public func desiredHeight(forWidth availableWidth: CoreGraphics.CGFloat = 0) -> CoreGraphics.CGFloat
  public var contentConstraints: PayPalCheckout.ContentConstrainer {
    get
  }
  @objc deinit
}
public protocol Transitionable {
  associatedtype Kind : PayPalCheckout.StaticIdentifiable
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AddCardView : UIKit.UIView, PayPalCheckout.ActionableRow, PayPalCheckout.ContentView {
  public var isVisible: Swift.Bool {
    get
  }
  public var showError: Swift.Bool {
    get
  }
  public var isShowingError: Swift.Bool
  public var shouldBeHidden: Swift.Bool
  public func desiredHeight(forWidth availableWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @objc deinit
  public func didSelectRow()
  public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  public func shouldSelectRow() -> Swift.Bool
  public func willChangeHeight(with update: PayPalCheckout.PageHeightUpdate)
  public func didChangeHeight(with update: PayPalCheckout.PageHeightUpdate)
}
@objc(PPCPaymentButtonFundingSource) public enum PaymentButtonFundingSource : Swift.Int, Swift.CaseIterable, Swift.CustomStringConvertible {
  case payPal
  case payLater
  case credit
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PayPalCheckout.PaymentButtonFundingSource]
  public typealias RawValue = Swift.Int
  public static var allCases: [PayPalCheckout.PaymentButtonFundingSource] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class TransitionLabel : UIKit.UILabel, PayPalCheckout.ContentView {
  public var insets: UIKit.NSDirectionalEdgeInsets {
    get
    set
  }
  public func desiredHeight(forWidth availableWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  public var contentConstraints: PayPalCheckout.ContentConstrainer {
    get
  }
  convenience public init(_ content: Swift.String = "", insets: UIKit.NSDirectionalEdgeInsets = .zero, textAlignment: UIKit.NSTextAlignment = .left, lineBreakMode: UIKit.NSLineBreakMode = .byWordWrapping)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @available(*, unavailable)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum FundingInstrumentType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case bankAccount
  case creditCard
  case cryptocurrency
  case incentive
  case providerBalance
  case providerCredit
  case privateLabelCreditCard
  case payToken
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayPalCheckout.FundingInstrumentType]
  public typealias RawValue = Swift.String
  public static var allCases: [PayPalCheckout.FundingInstrumentType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum FundingInstrumentSubType : Swift.String, Swift.Codable, Swift.CaseIterable, Swift.Equatable {
  case checking
  case savings
  case balance
  case cryptocurrency
  case credit
  case debit
  case provider
  case prepaid
  case merchant
  case incentive
  case paypalSpecific
  case merchantSpecific
  case unknown
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayPalCheckout.FundingInstrumentSubType]
  public typealias RawValue = Swift.String
  public static var allCases: [PayPalCheckout.FundingInstrumentSubType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum FundingInstrumentMethodType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case instant
  case delayed
  case manual
  case echeck
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayPalCheckout.FundingInstrumentMethodType]
  public typealias RawValue = Swift.String
  public static var allCases: [PayPalCheckout.FundingInstrumentMethodType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum FPTIEventType {
  case impression
  case decision
  case error
  case transition
  case click
  case scroll
  case custom(Swift.String)
}
public struct NetworkOperationResult : PayPalCheckout.NetworkResult, Swift.Equatable {
  public var data: Foundation.Data?
  public var status: PayPalCheckout.NetworkStatus
  public var code: Swift.Int
  public func jsonDecode<T>(_ type: T.Type) -> T? where T : Swift.Decodable
  public init(_ status: PayPalCheckout.NetworkStatus, data: Foundation.Data? = nil, statusCode: Swift.Int = -1)
  public static func == (a: PayPalCheckout.NetworkOperationResult, b: PayPalCheckout.NetworkOperationResult) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class UpdateClientConfigStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.UpdateClientConfigStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
public struct AddressSuggestions : Swift.Codable, Swift.Equatable {
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: PayPalCheckout.AddressSuggestions, b: PayPalCheckout.AddressSuggestions) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
public struct AddressSuggestion : Swift.Codable, Swift.Hashable, PayPalCheckout.Suggestion {
  public var id: Swift.String {
    get
  }
  public var suggestionImageName: Swift.String? {
    get
  }
  public let mainText: Swift.String
  public let secondaryText: Swift.String?
  public var isSelected: Swift.Bool {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: PayPalCheckout.AddressSuggestion, b: PayPalCheckout.AddressSuggestion) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class BackAction : UIKit.UIButton, PayPalCheckout.ContentView {
  public func desiredHeight(forWidth availableWidth: CoreGraphics.CGFloat = 0) -> CoreGraphics.CGFloat
  public var contentConstraints: PayPalCheckout.ContentConstrainer {
    get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum CardIssuer : Swift.String, Swift.Codable, Swift.CaseIterable {
  case amex
  case visa
  case masterCard
  case discover
  case maestro
  case jcb
  case dinersClub
  case cbNationale
  case cofinoga
  case cetelem
  case cofidis
  case elo
  case hiper
  case hipercard
  case unionPay
  case ruPay
  public var addCardField: PayPalCheckout.AddCardField? {
    get
  }
  public static var supportedTypes: [PayPalCheckout.AddCardField] {
    get
  }
  public static var unsupportedTypes: [PayPalCheckout.CardIssuer] {
    get
  }
  public var maskForCardType: Swift.String? {
    get
  }
  public var maskForCSC: Swift.String? {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayPalCheckout.CardIssuer]
  public typealias RawValue = Swift.String
  public static var allCases: [PayPalCheckout.CardIssuer] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum BankAccountType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case businessChecking
  case businessSavings
  case checking
  case custom
  case normal
  case savings
  case unknown
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayPalCheckout.BankAccountType]
  public typealias RawValue = Swift.String
  public static var allCases: [PayPalCheckout.BankAccountType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc(PPCCurrencyCode) public enum CurrencyCode : Swift.Int, Swift.CaseIterable {
  case aud
  case brl
  case cad
  case cny
  case czk
  case dkk
  case eur
  case hkd
  case huf
  case inr
  case ils
  case jpy
  case myr
  case mxn
  case twd
  case nzd
  case nok
  case php
  case pln
  case gbp
  case rub
  case sgd
  case sek
  case chf
  case thb
  case usd
  public static func currencyCode(from stringValue: Swift.String) -> PayPalCheckout.CurrencyCode?
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PayPalCheckout.CurrencyCode]
  public typealias RawValue = Swift.Int
  public static var allCases: [PayPalCheckout.CurrencyCode] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public struct AddressValidationError : Swift.Codable {
  public let field: Swift.String
  public let code: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol FadingContentView : UIKit.UIView, PayPalCheckout.ContentView {
}
extension FadingContentView {
  public func willChangeHeight(with update: PayPalCheckout.PageHeightUpdate)
  public func didChangeHeight(with update: PayPalCheckout.PageHeightUpdate)
}
@_hasMissingDesignatedInitializers public class EligibilityStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.EligibilityStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
public struct CheckoutApprovePaymentResult : Swift.Codable, Swift.Equatable {
  public var session: PayPalCheckout.CheckoutSession {
    get
  }
  public let paymentID: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: PayPalCheckout.CheckoutApprovePaymentResult, b: PayPalCheckout.CheckoutApprovePaymentResult) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CheckoutCompleteResult : Swift.Codable, Swift.Equatable {
  public let data: PayPalCheckout.CheckoutApprovePaymentResult?
  public static func == (a: PayPalCheckout.CheckoutCompleteResult, b: PayPalCheckout.CheckoutCompleteResult) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc(PPCShippingChangeType) public enum ShippingChangeType : Swift.Int {
  case shippingAddress
  case shippingMethod
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(PPCShippingChange) @objcMembers final public class ShippingChange : ObjectiveC.NSObject {
  @objc final public let type: PayPalCheckout.ShippingChangeType
  @objc final public let selectedShippingAddress: PayPalCheckout.ShippingChangeAddress
  @objc final public let shippingMethods: [PayPalCheckout.ShippingMethod]
  @objc final public var selectedShippingMethod: PayPalCheckout.ShippingMethod? {
    @objc get
  }
  @objc final public let payToken: Swift.String
  @objc final public let paymentID: Swift.String?
  @objc final public let billingToken: Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers public class InitializeFirebaseStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.InitializeFirebaseStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
@objc @_inheritsConvenienceInitializers public class LogoImageView : UIKit.UIImageView, PayPalCheckout.ContentView {
  public func desiredHeight(forWidth availableWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  public var reportTrueSize: Swift.Bool
  public var isVisible: Swift.Bool {
    get
  }
  public var contentConstraints: (UIKit.UIView, PayPalCheckout.ContentPage) -> [UIKit.NSLayoutConstraint]
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic public init(image: UIKit.UIImage?)
  @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @objc deinit
}
public protocol Merchant {
  var country: Swift.String? { get }
  var merchantId: Swift.String? { get }
  var name: Swift.String? { get }
}
public protocol ProviderCreditOffer {
  var referenceID: Swift.String? { get }
  var content: PayPalCheckout.PPCOffersContent? { get }
  var clickURL: Foundation.URL? { get }
  var dismissURL: Foundation.URL? { get }
  var impressionURL: Foundation.URL? { get }
}
public protocol PPCOffersContent {
  var ctaText: Swift.String? { get }
  var product: Swift.String? { get }
  var offerType: Swift.String? { get }
  var offerCategory: Swift.String? { get }
  var termsLink: Foundation.URL? { get }
  var termsLinkText: Swift.String? { get }
  var termsText: Swift.String? { get }
  var offerText2: Swift.String? { get }
  var offerText1: Swift.String? { get }
  var offerTextTemplate: Swift.String? { get }
  var offerHeading: Swift.String? { get }
  var offerCheckoutButtonText: Swift.String? { get }
}
public protocol CheckoutSession {
  var checkoutSessionType: PayPalCheckout.CheckoutSessionType { get }
  var cart: PayPalCheckout.Cart? { get }
  var buyer: PayPalCheckout.User? { get }
  var merchant: PayPalCheckout.Merchant? { get }
  var flags: PayPalCheckout.CheckoutSessionFlags? { get }
  var shippingAddresses: [PayPalCheckout.ShippingAddress] { get }
  var creditOffers: [PayPalCheckout.ProviderCreditOffer] { get }
  var fundingOptions: [PayPalCheckout.FundingOption] { get }
  var allowedCardIssuers: [PayPalCheckout.CardIssuer] { get }
  var isBillingAddressConsentRequired: Swift.Bool { get }
  var isBillingAgreement: Swift.Bool { get }
  var isChangePaymentMethodAllowed: Swift.Bool { get }
  var isChangeShippingAddressAllowed: Swift.Bool { get }
  var blockNonDomesticShipping: Swift.Bool { get }
  var isSetStickyBillingAllowed: Swift.Bool { get }
  var isSignupEligible: Swift.Bool { get }
  var paymentContingencies: PayPalCheckout.PaymentContingencies? { get }
  var shouldHideCartDetails: Swift.Bool { get }
  var shouldHideShipping: Swift.Bool { get }
  var shouldShowProviderCreditOffer: Swift.Bool { get }
  var selectedPlan: PayPalCheckout.Plan? { get }
  var preferredFundingOption: PayPalCheckout.FundingOption? { get }
  var selectedAddress: PayPalCheckout.ShippingAddress? { get }
  var state: PayPalCheckout.CheckoutState? { get }
  var userAction: PayPalCheckout.UserAction? { get }
}
extension CheckoutSession {
  public var selectedPlan: PayPalCheckout.Plan? {
    get
  }
  public var preferredFundingOption: PayPalCheckout.FundingOption? {
    get
  }
  public var selectedAddress: PayPalCheckout.ShippingAddress? {
    get
  }
  public var selectedShippingMethod: PayPalCheckout.ShippingMethod? {
    get
  }
  public var paymentContingenciesPresent: Swift.Bool {
    get
  }
}
@objc(PPCPaymentButtonSize) public enum PaymentButtonSize : Swift.Int, Swift.CaseIterable, Swift.CustomStringConvertible {
  case mini
  case collapsed
  case expanded
  case full
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PayPalCheckout.PaymentButtonSize]
  public typealias RawValue = Swift.Int
  public static var allCases: [PayPalCheckout.PaymentButtonSize] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(PPCPayPalCreditButtonUIConfiguration) @objcMembers public class PayPalCreditButtonUIConfiguration : ObjectiveC.NSObject {
  public typealias Color = PayPalCheckout.PayPalCreditButton.Color
  @objc override dynamic public init()
  @objc public init(color: PayPalCheckout.PayPalCreditButtonUIConfiguration.Color = .darkBlue, attributes: PayPalCheckout.PaymentButtonAttributes = .init())
  @objc deinit
}
public protocol PlanTypes {
  var soloPlan: PayPalCheckout.Plan { get }
  var splitPlans: [PayPalCheckout.Plan] { get }
}
public protocol CurrencyConversion {
  var from: PayPalCheckout.UnitAmount { get }
  var to: PayPalCheckout.UnitAmount { get }
  var converted: PayPalCheckout.UnitAmount { get }
  var type: PayPalCheckout.CurrencyConversionType { get }
  var feeRate: Swift.String? { get }
  var spread: Swift.String? { get }
  var rate: Swift.String? { get }
  var canChangeConversionType: Swift.Bool { get }
}
public protocol Plan {
  var id: Swift.String? { get }
  var fundingSources: [PayPalCheckout.FundingSource] { get }
  var backupFundingInstrument: PayPalCheckout.FundingInstrument? { get }
  var currencyConversion: PayPalCheckout.CurrencyConversion? { get }
  var fundingContingencies: [PayPalCheckout.ThreeDomainSecureResolutionContingency] { get }
  var isSelected: Swift.Bool { get }
}
@_hasMissingDesignatedInitializers public class MoveToShutdownPage : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.MoveToShutdownPage.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
public class SequenceProcessor<Context> {
  public typealias Next = (Swift.Error?) -> Swift.Void
  public typealias Callback = PayPalCheckout.Step<Context>
  public typealias PreFireListener = (PayPalCheckout.SequenceProcessor<Context>.Callback, Context?) -> PayPalCheckout.SequenceProcessor<Context>.Callback
  public var callbacks: [PayPalCheckout.SequenceProcessor<Context>.Callback]
  public var listeners: [PayPalCheckout.SequenceProcessor<Context>.PreFireListener]
  final public let queue: Dispatch.DispatchQueue?
  public var nextSequence: PayPalCheckout.SequenceProcessor<Context>?
  public init(_ items: [PayPalCheckout.SequenceProcessor<Context>.Callback] = [], queue: Dispatch.DispatchQueue? = nil)
  @objc deinit
}
extension SequenceProcessor : PayPalCheckout.CheckoutProcess where Context == PayPalCheckout.State {
  public func index(of itemType: PayPalCheckout.SequenceProcessor<Context>.Callback.Type) -> Swift.Int?
  public func append(_ item: PayPalCheckout.SequenceProcessor<Context>.Callback)
  public func insert(_ item: PayPalCheckout.SequenceProcessor<Context>.Callback, at index: Swift.Int)
  public func remove(at index: Swift.Int) -> PayPalCheckout.SequenceProcessor<Context>.Callback
}
@_hasMissingDesignatedInitializers public class CardinalStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.CardinalStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
public enum NetworkSynchronicity {
  case synchronous
  case asynchronous
  public static func == (a: PayPalCheckout.NetworkSynchronicity, b: PayPalCheckout.NetworkSynchronicity) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class LineItemContainerView : UIKit.UIView, PayPalCheckout.ContentView {
  public var id: Swift.String {
    get
  }
  public func desiredHeight(forWidth availableWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  final public let itemDetailLabel: UIKit.UILabel
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
@objc(PPCPayPalButton) public class PayPalButton : PayPalCheckout.PaymentButton {
  @objc(PPCPayPalButtonColor) public enum Color : Swift.Int, Swift.CaseIterable {
    case gold = 0
    case white = 1
    case black = 2
    case silver = 3
    case blue = 4
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [PayPalCheckout.PayPalButton.Color]
    public typealias RawValue = Swift.Int
    public static var allCases: [PayPalCheckout.PayPalButton.Color] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(PPCPayPalButtonLabel) public enum Label : Swift.Int, Swift.CaseIterable {
    case none = -1
    case checkout = 0
    case buyNow = 1
    case payWith = 2
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [PayPalCheckout.PayPalButton.Label]
    public typealias RawValue = Swift.Int
    public static var allCases: [PayPalCheckout.PayPalButton.Label] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc @available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
  convenience public init(insets: UIKit.NSDirectionalEdgeInsets, color: PayPalCheckout.PayPalButton.Color = .gold, edges: PayPalCheckout.PaymentButtonEdges = .softEdges, size: PayPalCheckout.PaymentButtonSize = .collapsed, label: PayPalCheckout.PayPalButton.Label = .none, isEnabled: Swift.Bool = true)
  @objc @available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
  convenience public init(color: PayPalCheckout.PayPalButton.Color = .gold, edges: PayPalCheckout.PaymentButtonEdges = .softEdges, size: PayPalCheckout.PaymentButtonSize = .collapsed, label: PayPalCheckout.PayPalButton.Label = .none, isEnabled: Swift.Bool = true)
  @objc deinit
}
public enum ButtonStateKey : Swift.Hashable {
  case primary
  case `continue`
  case addCard
  case applyForCredit
  case payIn4
  case payNow
  case shippingChangeError
  case custom(Swift.String)
  public static func == (a: PayPalCheckout.ButtonStateKey, b: PayPalCheckout.ButtonStateKey) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class GetFeatureFlagsStep : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.GetFeatureFlagsStep.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
public protocol CartItem {
  var unitPrice: PayPalCheckout.UnitAmount { get }
  var total: PayPalCheckout.UnitAmount { get }
  var name: Swift.String { get }
  var itemDescription: Swift.String? { get }
  var quantity: Swift.Int { get }
}
public protocol Cart {
  var intent: Swift.String { get }
  var items: [PayPalCheckout.CartItem] { get }
  var handlingFee: PayPalCheckout.UnitAmount { get }
  var insurance: PayPalCheckout.UnitAmount { get }
  var shippingAndHandling: PayPalCheckout.UnitAmount { get }
  var subtotal: PayPalCheckout.UnitAmount { get }
  var tax: PayPalCheckout.UnitAmount { get }
  var total: PayPalCheckout.UnitAmount { get }
  var totalAllowedOverCaptureAmount: PayPalCheckout.UnitAmount { get }
  var shippingMethods: [PayPalCheckout.ShippingMethod] { get }
  var cartID: Swift.String { get }
  var paymentID: Swift.String? { get }
  var cancelURL: Foundation.URL? { get }
  var returnURL: Foundation.URL? { get }
  var billingToken: Swift.String? { get }
  var billingType: PayPalCheckout.BillingType? { get }
  var shippingAddress: PayPalCheckout.CartAddress? { get }
  var billingAddress: PayPalCheckout.CartAddress? { get }
}
@objc(PPCUserAction) public enum UserAction : Swift.Int {
  case `default`
  case `continue`
  case payNow
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ProfilePage : PayPalCheckout.ContentPage {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class SuggestionsView : UIKit.UIView, PayPalCheckout.ContentView, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDelegateFlowLayout {
  final public func desiredHeight(forWidth availableWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  final public var shouldShow: Swift.Bool {
    get
    set
  }
  final public var searchText: Swift.String? {
    get
    set
  }
  final public var suggestions: [PayPalCheckout.Suggestion] {
    get
    set
  }
  @objc override final public func layoutSubviews()
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForFooterInSection section: Swift.Int) -> CoreGraphics.CGSize
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
@objc(PPCOrderApplicationContext) @objcMembers public class OrderApplicationContext : ObjectiveC.NSObject, Swift.Encodable {
  @objc final public let brandName: Swift.String?
  @objc final public let locale: Swift.String?
  @objc final public let shippingPreference: PayPalCheckout.OrderApplicationContext.ShippingPreference
  @objc final public let userAction: PayPalCheckout.OrderApplicationContext.UserAction
  @objc final public let paymentMethod: PayPalCheckout.OrderApplicationContext.PaymentMethod?
  @objc final public let returnUrl: Swift.String?
  @objc final public let cancelUrl: Swift.String?
  @objc final public let storedPaymentSource: PayPalCheckout.OrderApplicationContext.StoredPaymentSource?
  @objc public init(brandName: Swift.String? = nil, locale: Swift.String? = nil, shippingPreference: PayPalCheckout.OrderApplicationContext.ShippingPreference = .none, userAction: PayPalCheckout.OrderApplicationContext.UserAction = .none, paymentMethod: PayPalCheckout.OrderApplicationContext.PaymentMethod? = nil, returnUrl: Swift.String? = nil, cancelUrl: Swift.String? = nil, storedPaymentSource: PayPalCheckout.OrderApplicationContext.StoredPaymentSource? = nil)
  @objc deinit
  @objc(PPCOrderApplicationContextShippingPreference) public enum ShippingPreference : Swift.Int {
    case none
    case getFromFile
    case noShipping
    case setProvidedAddress
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(PPCOrderApplicationContextUserAction) public enum UserAction : Swift.Int {
    case none
    case `continue`
    case payNow
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(PPCOrderApplicationContextPaymentMethod) @objcMembers public class PaymentMethod : ObjectiveC.NSObject, Swift.Encodable {
    @objc final public let payerSelected: PayPalCheckout.OrderApplicationContext.PayerSelected
    @objc final public let payeePreferred: PayPalCheckout.OrderApplicationContext.PayeePreferred
    @objc final public let standardEntryClassCode: PayPalCheckout.OrderApplicationContext.StandardEntryClassCode
    @objc public init(payerSelected: PayPalCheckout.OrderApplicationContext.PayerSelected = .none, payeePreferred: PayPalCheckout.OrderApplicationContext.PayeePreferred = .none, standardEntryClassCode: PayPalCheckout.OrderApplicationContext.StandardEntryClassCode = .none)
    @objc deinit
    @objc override dynamic public init()
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc(PPCOrderApplicationContextPayerSelected) public enum PayerSelected : Swift.Int {
    case none
    case paypal
    case paypalCredit
    case paypalPayLater
    case flexPay
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(PPCOrderApplicationContextPayeePreferred) public enum PayeePreferred : Swift.Int {
    case none
    case unrestricted
    case immediatePaymentRequired
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(PPCOrderApplicationContextStandardEntryClassCode) public enum StandardEntryClassCode : Swift.Int {
    case none
    case tel
    case web
    case ccd
    case ppd
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(PPCOrderApplicationContextStoredPaymentSource) @objcMembers public class StoredPaymentSource : ObjectiveC.NSObject, Swift.Encodable {
    @objc final public let paymentInitiator: PayPalCheckout.OrderApplicationContext.PaymentInitiator
    @objc final public let paymentType: PayPalCheckout.OrderApplicationContext.PaymentType
    @objc final public let usage: PayPalCheckout.OrderApplicationContext.Usage
    @objc final public let previousNetworkTransactionReference: PayPalCheckout.OrderApplicationContext.PreviousNetworkTransactionReference?
    @objc public init(paymentInitiator: PayPalCheckout.OrderApplicationContext.PaymentInitiator, paymentType: PayPalCheckout.OrderApplicationContext.PaymentType, usage: PayPalCheckout.OrderApplicationContext.Usage = .none, previousNetworkTransactionReference: PayPalCheckout.OrderApplicationContext.PreviousNetworkTransactionReference? = nil)
    @objc deinit
    @objc override dynamic public init()
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc(PPCOrderApplicationContextPaymentInitiator) public enum PaymentInitiator : Swift.Int {
    case customer
    case merchant
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(PPCOrderApplicationContextPaymentType) public enum PaymentType : Swift.Int {
    case oneTime
    case recurring
    case unscheduled
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(PPCOrderApplicationContextUsage) public enum Usage : Swift.Int {
    case none
    case first
    case subsequent
    case derived
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(PPCOrderApplicationContextPreviousNetworkTransactionReference) @objcMembers public class PreviousNetworkTransactionReference : ObjectiveC.NSObject, Swift.Encodable {
    @objc final public let id: Swift.String
    @objc final public let date: Swift.String?
    @objc final public let network: PayPalCheckout.OrderApplicationContext.Network
    @objc public init(id: Swift.String, network: PayPalCheckout.OrderApplicationContext.Network, date: Swift.String? = nil)
    @objc deinit
    @objc override dynamic public init()
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc(PPCOrderApplicationContextNetwork) public enum Network : Swift.Int {
    case visa
    case mastercard
    case discover
    case amex
    case solo
    case jcb
    case star
    case delta
    case switchCard
    case maestro
    case cbNationale
    case configoga
    case confidis
    case electron
    case cetelem
    case chinaUnionPay
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc override dynamic public init()
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ThreeDSGenericURL : Swift.Codable, Swift.Equatable {
  public let href: Swift.String?
  public static func == (a: PayPalCheckout.ThreeDSGenericURL, b: PayPalCheckout.ThreeDSGenericURL) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class LSATUpgradeTask : PayPalCheckout.SequenceProcessor<PayPalCheckout.State>.Callback {
  override public func execute(context: PayPalCheckout.State?, completion: PayPalCheckout.LSATUpgradeTask.Next?)
  @objc deinit
  override public init(context: PayPalCheckout.State? = super, name: Swift.String? = super, _ function: ((PayPalCheckout.State?, PayPalCheckout.Step<PayPalCheckout.State>.Next?) -> Swift.Void)? = super)
}
public protocol NetworkResult {
  var data: Foundation.Data? { get }
  var status: PayPalCheckout.NetworkStatus { get }
  var code: Swift.Int { get }
  var stringFormat: Swift.String? { get }
}
extension NetworkResult {
  public var stringFormat: Swift.String? {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
@objc(PPCPayPalCreditButton) public class PayPalCreditButton : PayPalCheckout.PaymentButton {
  @objc(PPCPayPalCreditButtonColor) public enum Color : Swift.Int, Swift.CaseIterable {
    case white = 1
    case black = 2
    case darkBlue = 5
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [PayPalCheckout.PayPalCreditButton.Color]
    public typealias RawValue = Swift.Int
    public static var allCases: [PayPalCheckout.PayPalCreditButton.Color] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc @available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
  convenience public init(insets: UIKit.NSDirectionalEdgeInsets, color: PayPalCheckout.PayPalCreditButton.Color = .darkBlue, edges: PayPalCheckout.PaymentButtonEdges = .softEdges, size: PayPalCheckout.PaymentButtonSize = .collapsed, isEnabled: Swift.Bool = true)
  @objc @available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
  convenience public init(color: PayPalCheckout.PayPalCreditButton.Color = .darkBlue, edges: PayPalCheckout.PaymentButtonEdges = .softEdges, size: PayPalCheckout.PaymentButtonSize = .collapsed, isEnabled: Swift.Bool = true)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(PPCShippingChangeAction) @objcMembers public class ShippingChangeAction : ObjectiveC.NSObject {
  @objc deinit
  @objc public func patch(request: PayPalCheckout.PatchRequest, onComplete: @escaping (PayPalCheckout.PatchActionSuccess?, Swift.Error?) -> Swift.Void)
  @objc public func approve()
  @objc public func reject()
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class Legalese : UIKit.UIView, PayPalCheckout.ContentView, PayPalCheckout.ViewModelView {
  public func desiredHeight(forWidth availableWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  public var contentConstraints: PayPalCheckout.ContentConstrainer {
    get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  public func willChangeHeight(with update: PayPalCheckout.PageHeightUpdate)
  public func changingHeight(with update: PayPalCheckout.PageHeightUpdate)
  public func didChangeHeight(with update: PayPalCheckout.PageHeightUpdate)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ShippingView : UIKit.UIView, PayPalCheckout.ContentView, PayPalCheckout.ViewModelView, PayPalCheckout.ActionableRow {
  public var id: Swift.String {
    get
  }
  public func desiredHeight(forWidth availableWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  public var isVisible: Swift.Bool {
    get
  }
  public var isPaysheetRow: Swift.Bool {
    get
  }
  @objc deinit
  public func updateData()
  public func shouldSelectRow() -> Swift.Bool
  public func didSelectRow()
  public func willChangeHeight(with update: PayPalCheckout.PageHeightUpdate)
  public func didChangeHeight(with update: PayPalCheckout.PageHeightUpdate)
}
public typealias PayToken = Swift.String
public typealias AuthToken = Swift.String
public typealias RedirectURI = PayPalCheckout.URI
public typealias URI = Swift.String
@_inheritsConvenienceInitializers @objc(PPCCorrelationIDs) @objcMembers final public class CorrelationIDs : ObjectiveC.NSObject {
  @objc final public var fundingEligibilityDebugID: Swift.String? {
    get
  }
  @objc final public var eligibilityDebugID: Swift.String? {
    get
  }
  @objc final public var updateClientConfigDebugID: Swift.String? {
    get
  }
  @objc final public var lsatUpgradeDebugID: Swift.String? {
    get
  }
  @objc final public var fetchPayloadDebugID: Swift.String? {
    get
  }
  @objc final public var fetchCartDebugIDs: [Swift.String] {
    get
  }
  @objc final public var currencyConversionDebugID: Swift.String? {
    get
  }
  @objc final public var completeSCADebugID: Swift.String? {
    get
  }
  @objc final public var finishCheckoutDebugID: Swift.String? {
    get
  }
  @objc final public var riskCorrelationID: Swift.String? {
    get
  }
  @objc final public var sessionIDs: PayPalCheckout.SessionIdentifiers {
    get
  }
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc(PPCSessionIDs) @objcMembers final public class SessionIdentifiers : ObjectiveC.NSObject {
  @objc final public var sdkSessionID: Swift.String?
  @objc final public var orderSessionID: Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc(PPCErrorInfo) @objcMembers final public class ErrorInfo : ObjectiveC.NSObject {
  @objc final public let error: Swift.Error
  @objc final public var reason: Swift.String {
    @objc get
  }
  @objc final public let correlationIDs: PayPalCheckout.CorrelationIDs
  @objc final public let payToken: Swift.String
  @objc final public let nativeSdkVersion: Swift.String
  @objc deinit
  @objc override dynamic public init()
}
public typealias Config = PayPalCheckout.CheckoutConfig
@objc(PPCheckoutConfig) @objcMembers public class CheckoutConfig : ObjectiveC.NSObject, Foundation.NSCopying {
  public typealias AuthenticationCallback = (@escaping (PayPalCheckout.AuthToken?, Swift.Error?) -> Swift.Void) -> Swift.Void
  public typealias AuthStepUpCallback = (PayPalCheckout.URI?, @escaping ((PayPalCheckout.RedirectURI?, Swift.Error?) -> Swift.Void)) -> Swift.Void
  public typealias CreateOrderCallback = (PayPalCheckout.CreateOrderAction) -> Swift.Void
  public typealias ApprovalCallback = (PayPalCheckout.Approval) -> Swift.Void
  public typealias CancelCallback = () -> Swift.Void
  public typealias ErrorCallback = (PayPalCheckout.ErrorInfo) -> Swift.Void
  public typealias LogoutCallback = () -> Swift.Void
  public typealias ShippingChangeCallback = (PayPalCheckout.ShippingChange, PayPalCheckout.ShippingChangeAction) -> Swift.Void
  @objc public var clientID: Swift.String
  @objc public var payToken: Swift.String?
  @objc public var userAction: PayPalCheckout.UserAction
  @objc public var environment: PayPalCheckout.Environment
  @objc public var environmentConfig: PayPalCheckout.EnvironmentConfig
  @objc public var onAuthenticate: PayPalCheckout.CheckoutConfig.AuthenticationCallback? {
    @objc get
    @objc set
  }
  @objc public var onAuthStepUp: PayPalCheckout.CheckoutConfig.AuthStepUpCallback?
  @objc public var createOrder: PayPalCheckout.CheckoutConfig.CreateOrderCallback?
  @objc public var onApprove: PayPalCheckout.CheckoutConfig.ApprovalCallback?
  @objc public var onCancel: PayPalCheckout.CheckoutConfig.CancelCallback?
  @objc public var onError: PayPalCheckout.CheckoutConfig.ErrorCallback?
  @objc public var onLogout: PayPalCheckout.CheckoutConfig.LogoutCallback?
  @objc public var onShippingChange: PayPalCheckout.CheckoutConfig.ShippingChangeCallback?
  @objc public var presentingViewController: UIKit.UIViewController?
  public var currencyCode: PayPalCheckout.CurrencyCode?
  @objc public var debugEnabled: Swift.Bool
  @objc public var merchantIDs: [Swift.String]?
  @objc public init(clientID: Swift.String, createOrder: PayPalCheckout.CheckoutConfig.CreateOrderCallback? = nil, onApprove: PayPalCheckout.CheckoutConfig.ApprovalCallback? = nil, onShippingChange: PayPalCheckout.CheckoutConfig.ShippingChangeCallback? = nil, onCancel: PayPalCheckout.CheckoutConfig.CancelCallback? = nil, onError: PayPalCheckout.CheckoutConfig.ErrorCallback? = nil, environment: PayPalCheckout.Environment = .live)
  @objc @available(*, deprecated, message: "`init(clientID:returnUrl: ...)` has been deprecated and will be removed in a future version of the SDK. Use `init(clientID: ...)` instead")
  convenience public init(clientID: Swift.String, returnUrl: Swift.String, createOrder: PayPalCheckout.CheckoutConfig.CreateOrderCallback? = nil, onApprove: PayPalCheckout.CheckoutConfig.ApprovalCallback? = nil, onShippingChange: PayPalCheckout.CheckoutConfig.ShippingChangeCallback? = nil, onCancel: PayPalCheckout.CheckoutConfig.CancelCallback? = nil, onError: PayPalCheckout.CheckoutConfig.ErrorCallback? = nil, environment: PayPalCheckout.Environment = .live)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc(PPCPatchActionSuccess) public class PatchActionSuccess : ObjectiveC.NSObject {
  @objc deinit
  @objc override dynamic public init()
}
public enum EventType : Swift.String, Swift.CaseIterable, Swift.CustomStringConvertible {
  case gqlPayload
  case gqlSessionCart
  case uiPageWillChange
  case uiPageIsChanging
  case uiPageDidChange
  case uiSetCardAsPreferred
  case uiProfilePicAvailable
  case uiCurrencyConversionChanged
  case openWeb
  case logout
  case addCard
  case updateCarouselAddCardImage
  case shippingAddressAdded
  case shippingChangeStarted
  case shippingChangeCompleted
  case setNewProfileImage
  case FICentered
  case FISelected
  case sdkApprovePayment
  case onApproveRTDBMessage
  case onCancel
  case sdkShutdown
  case errorApprovingPayment
  case onError
  case selectedPlanChanged
  case toggleCartDetailsView
  case firebaseSetProps
  case openProfileLink
  case nativeEligibilityUpdated
  case duplicateTokenFound
  case duplicateButtonSessionID
  case sdkFinishing
  case createOrderSucceeded
  case errorApproving3DS
  case fiFailed3DS
  case fundingOptionsChanged
  case paysheetDidAppear
  case paysheetWillDisappear
  case attemptNativeAddCard
  case onGenericError
  case addCardApproved
  case addCardStateUpdated
  case treatmentsUpdated
  case countrySelected
  case placeDetailsUpdate
  case onCloseButtonTapped
  case keyboardWillShow
  case keyboardWillHide
  case cardinalNotPresent
  case billingBalanceToggled
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PayPalCheckout.EventType]
  public typealias RawValue = Swift.String
  public static var allCases: [PayPalCheckout.EventType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct OnError : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension PayPalCheckout.PaymentButtonEdges : Swift.Equatable {}
extension PayPalCheckout.PaymentButtonEdges : Swift.Hashable {}
extension PayPalCheckout.PaymentButtonEdges : Swift.RawRepresentable {}
extension PayPalCheckout.ShippingChangeState : Swift.Equatable {}
extension PayPalCheckout.ShippingChangeState : Swift.Hashable {}
extension PayPalCheckout.ShippingChangeState : Swift.RawRepresentable {}
extension PayPalCheckout.EventPlayback : Swift.Equatable {}
extension PayPalCheckout.EventPlayback : Swift.Hashable {}
@available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
extension PayPalCheckout.PayPalPayLaterButton.Color : Swift.Equatable {}
@available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
extension PayPalCheckout.PayPalPayLaterButton.Color : Swift.Hashable {}
@available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
extension PayPalCheckout.PayPalPayLaterButton.Color : Swift.RawRepresentable {}
extension PayPalCheckout.ButtonState.Color : Swift.Equatable {}
extension PayPalCheckout.ButtonState.Color : Swift.Hashable {}
extension PayPalCheckout.TextInputState : Swift.Equatable {}
extension PayPalCheckout.TextInputState : Swift.Hashable {}
extension PayPalCheckout.FundingProvider : Swift.Equatable {}
extension PayPalCheckout.FundingProvider : Swift.Hashable {}
extension PayPalCheckout.FundingProvider : Swift.RawRepresentable {}
extension PayPalCheckout.OrderIntent : Swift.Equatable {}
extension PayPalCheckout.OrderIntent : Swift.Hashable {}
extension PayPalCheckout.OrderIntent : Swift.RawRepresentable {}
extension PayPalCheckout.OrderPayer.PhoneType : Swift.Equatable {}
extension PayPalCheckout.OrderPayer.PhoneType : Swift.Hashable {}
extension PayPalCheckout.OrderPayer.PhoneType : Swift.RawRepresentable {}
extension PayPalCheckout.OrderPayer.TaxIdType : Swift.Equatable {}
extension PayPalCheckout.OrderPayer.TaxIdType : Swift.Hashable {}
extension PayPalCheckout.OrderPayer.TaxIdType : Swift.RawRepresentable {}
extension PayPalCheckout.PaymentButtonLabel : Swift.Equatable {}
extension PayPalCheckout.PaymentButtonLabel : Swift.Hashable {}
extension PayPalCheckout.PaymentButtonLabel : Swift.RawRepresentable {}
extension PayPalCheckout.PurchaseUnit.DisbursementMode : Swift.Equatable {}
extension PayPalCheckout.PurchaseUnit.DisbursementMode : Swift.Hashable {}
extension PayPalCheckout.PurchaseUnit.DisbursementMode : Swift.RawRepresentable {}
extension PayPalCheckout.PurchaseUnit.Category : Swift.Equatable {}
extension PayPalCheckout.PurchaseUnit.Category : Swift.Hashable {}
extension PayPalCheckout.PurchaseUnit.Category : Swift.RawRepresentable {}
extension PayPalCheckout.FallbackType : Swift.Equatable {}
extension PayPalCheckout.FallbackType : Swift.Hashable {}
extension PayPalCheckout.FallbackType : Swift.RawRepresentable {}
extension PayPalCheckout.ThreeDSPaymentExperience : Swift.Equatable {}
extension PayPalCheckout.ThreeDSPaymentExperience : Swift.Hashable {}
extension PayPalCheckout.ThreeDSPaymentExperience : Swift.RawRepresentable {}
extension PayPalCheckout.ThreeDSContingencySourceType : Swift.Hashable {}
extension PayPalCheckout.ThreeDSContingencySourceType : Swift.RawRepresentable {}
extension PayPalCheckout.ThreeDSContingencyReasonType : Swift.Hashable {}
extension PayPalCheckout.ThreeDSContingencyReasonType : Swift.RawRepresentable {}
extension PayPalCheckout.PaymentButtonEligibilityStatus : Swift.Equatable {}
extension PayPalCheckout.PaymentButtonEligibilityStatus : Swift.Hashable {}
extension PayPalCheckout.PaymentButtonEligibilityStatus : Swift.RawRepresentable {}
extension PayPalCheckout.ProcessingInstruction : Swift.Equatable {}
extension PayPalCheckout.ProcessingInstruction : Swift.Hashable {}
extension PayPalCheckout.ProcessingInstruction : Swift.RawRepresentable {}
extension PayPalCheckout.PaymentButtonColor : Swift.Equatable {}
extension PayPalCheckout.PaymentButtonColor : Swift.Hashable {}
extension PayPalCheckout.PaymentButtonColor : Swift.RawRepresentable {}
extension PayPalCheckout.ColorType : Swift.Equatable {}
extension PayPalCheckout.ColorType : Swift.Hashable {}
extension PayPalCheckout.NetworkStatus : Swift.Equatable {}
extension PayPalCheckout.NetworkStatus : Swift.Hashable {}
extension PayPalCheckout.HeightChange : Swift.Equatable {}
extension PayPalCheckout.HeightChange : Swift.Hashable {}
extension PayPalCheckout.ContentSection : Swift.Equatable {}
extension PayPalCheckout.ContentSection : Swift.Hashable {}
extension PayPalCheckout.ContentSection : Swift.RawRepresentable {}
extension PayPalCheckout.NetworkInputType : Swift.Equatable {}
extension PayPalCheckout.NetworkInputType : Swift.Hashable {}
extension PayPalCheckout.PresentationMode : Swift.Equatable {}
extension PayPalCheckout.PresentationMode : Swift.Hashable {}
extension PayPalCheckout.NetworkActionType : Swift.Equatable {}
extension PayPalCheckout.NetworkActionType : Swift.Hashable {}
extension PayPalCheckout.Environment : Swift.Equatable {}
extension PayPalCheckout.Environment : Swift.Hashable {}
extension PayPalCheckout.Environment : Swift.RawRepresentable {}
extension PayPalCheckout.Channel : Swift.Equatable {}
extension PayPalCheckout.Channel : Swift.Hashable {}
extension PayPalCheckout.Channel : Swift.RawRepresentable {}
extension PayPalCheckout.ShippingType : Swift.Equatable {}
extension PayPalCheckout.ShippingType : Swift.Hashable {}
extension PayPalCheckout.ShippingType : Swift.RawRepresentable {}
extension PayPalCheckout.LogLevel : Swift.Equatable {}
extension PayPalCheckout.LogLevel : Swift.Hashable {}
extension PayPalCheckout.LogLevel : Swift.RawRepresentable {}
extension PayPalCheckout.ApprovalOrderIntent : Swift.Equatable {}
extension PayPalCheckout.ApprovalOrderIntent : Swift.Hashable {}
extension PayPalCheckout.ApprovalOrderIntent : Swift.RawRepresentable {}
extension PayPalCheckout.AddressType : Swift.Equatable {}
extension PayPalCheckout.AddressType : Swift.Hashable {}
extension PayPalCheckout.AddressType : Swift.RawRepresentable {}
extension PayPalCheckout.ResponderStatus : Swift.Equatable {}
extension PayPalCheckout.ResponderStatus : Swift.Hashable {}
extension PayPalCheckout.Priority : Swift.Hashable {}
extension PayPalCheckout.Priority : Swift.RawRepresentable {}
extension PayPalCheckout.CurrencyConversionType : Swift.Equatable {}
extension PayPalCheckout.CurrencyConversionType : Swift.Hashable {}
extension PayPalCheckout.CurrencyConversionType : Swift.RawRepresentable {}
extension PayPalCheckout.CheckoutState : Swift.Equatable {}
extension PayPalCheckout.CheckoutState : Swift.Hashable {}
extension PayPalCheckout.CheckoutState : Swift.RawRepresentable {}
extension PayPalCheckout.CheckoutSessionType : Swift.Equatable {}
extension PayPalCheckout.CheckoutSessionType : Swift.Hashable {}
extension PayPalCheckout.CheckoutSessionType : Swift.RawRepresentable {}
extension PayPalCheckout.BillingType : Swift.Equatable {}
extension PayPalCheckout.BillingType : Swift.Hashable {}
extension PayPalCheckout.BillingType : Swift.RawRepresentable {}
extension PayPalCheckout.APICallStatus : Swift.Equatable {}
extension PayPalCheckout.APICallStatus : Swift.Hashable {}
extension PayPalCheckout.APICallStatus : Swift.RawRepresentable {}
extension PayPalCheckout.HTTPMethod : Swift.Equatable {}
extension PayPalCheckout.HTTPMethod : Swift.Hashable {}
extension PayPalCheckout.HTTPMethod : Swift.RawRepresentable {}
extension PayPalCheckout.PaymentButtonFundingSource : Swift.Equatable {}
extension PayPalCheckout.PaymentButtonFundingSource : Swift.Hashable {}
extension PayPalCheckout.PaymentButtonFundingSource : Swift.RawRepresentable {}
extension PayPalCheckout.FundingInstrumentType : Swift.Equatable {}
extension PayPalCheckout.FundingInstrumentType : Swift.Hashable {}
extension PayPalCheckout.FundingInstrumentType : Swift.RawRepresentable {}
extension PayPalCheckout.FundingInstrumentSubType : Swift.Hashable {}
extension PayPalCheckout.FundingInstrumentSubType : Swift.RawRepresentable {}
extension PayPalCheckout.FundingInstrumentMethodType : Swift.Equatable {}
extension PayPalCheckout.FundingInstrumentMethodType : Swift.Hashable {}
extension PayPalCheckout.FundingInstrumentMethodType : Swift.RawRepresentable {}
extension PayPalCheckout.CardIssuer : Swift.Equatable {}
extension PayPalCheckout.CardIssuer : Swift.Hashable {}
extension PayPalCheckout.CardIssuer : Swift.RawRepresentable {}
extension PayPalCheckout.BankAccountType : Swift.Equatable {}
extension PayPalCheckout.BankAccountType : Swift.Hashable {}
extension PayPalCheckout.BankAccountType : Swift.RawRepresentable {}
extension PayPalCheckout.CurrencyCode : Swift.Equatable {}
extension PayPalCheckout.CurrencyCode : Swift.Hashable {}
extension PayPalCheckout.CurrencyCode : Swift.RawRepresentable {}
extension PayPalCheckout.ShippingChangeType : Swift.Equatable {}
extension PayPalCheckout.ShippingChangeType : Swift.Hashable {}
extension PayPalCheckout.ShippingChangeType : Swift.RawRepresentable {}
extension PayPalCheckout.PaymentButtonSize : Swift.Equatable {}
extension PayPalCheckout.PaymentButtonSize : Swift.Hashable {}
extension PayPalCheckout.PaymentButtonSize : Swift.RawRepresentable {}
extension PayPalCheckout.NetworkSynchronicity : Swift.Equatable {}
extension PayPalCheckout.NetworkSynchronicity : Swift.Hashable {}
@available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
extension PayPalCheckout.PayPalButton.Color : Swift.Equatable {}
@available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
extension PayPalCheckout.PayPalButton.Color : Swift.Hashable {}
@available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
extension PayPalCheckout.PayPalButton.Color : Swift.RawRepresentable {}
@available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
extension PayPalCheckout.PayPalButton.Label : Swift.Equatable {}
@available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
extension PayPalCheckout.PayPalButton.Label : Swift.Hashable {}
@available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
extension PayPalCheckout.PayPalButton.Label : Swift.RawRepresentable {}
extension PayPalCheckout.UserAction : Swift.Equatable {}
extension PayPalCheckout.UserAction : Swift.Hashable {}
extension PayPalCheckout.UserAction : Swift.RawRepresentable {}
extension PayPalCheckout.OrderApplicationContext.ShippingPreference : Swift.Equatable {}
extension PayPalCheckout.OrderApplicationContext.ShippingPreference : Swift.Hashable {}
extension PayPalCheckout.OrderApplicationContext.ShippingPreference : Swift.RawRepresentable {}
extension PayPalCheckout.OrderApplicationContext.UserAction : Swift.Equatable {}
extension PayPalCheckout.OrderApplicationContext.UserAction : Swift.Hashable {}
extension PayPalCheckout.OrderApplicationContext.UserAction : Swift.RawRepresentable {}
extension PayPalCheckout.OrderApplicationContext.PayerSelected : Swift.Equatable {}
extension PayPalCheckout.OrderApplicationContext.PayerSelected : Swift.Hashable {}
extension PayPalCheckout.OrderApplicationContext.PayerSelected : Swift.RawRepresentable {}
extension PayPalCheckout.OrderApplicationContext.PayeePreferred : Swift.Equatable {}
extension PayPalCheckout.OrderApplicationContext.PayeePreferred : Swift.Hashable {}
extension PayPalCheckout.OrderApplicationContext.PayeePreferred : Swift.RawRepresentable {}
extension PayPalCheckout.OrderApplicationContext.StandardEntryClassCode : Swift.Equatable {}
extension PayPalCheckout.OrderApplicationContext.StandardEntryClassCode : Swift.Hashable {}
extension PayPalCheckout.OrderApplicationContext.StandardEntryClassCode : Swift.RawRepresentable {}
extension PayPalCheckout.OrderApplicationContext.PaymentInitiator : Swift.Equatable {}
extension PayPalCheckout.OrderApplicationContext.PaymentInitiator : Swift.Hashable {}
extension PayPalCheckout.OrderApplicationContext.PaymentInitiator : Swift.RawRepresentable {}
extension PayPalCheckout.OrderApplicationContext.PaymentType : Swift.Equatable {}
extension PayPalCheckout.OrderApplicationContext.PaymentType : Swift.Hashable {}
extension PayPalCheckout.OrderApplicationContext.PaymentType : Swift.RawRepresentable {}
extension PayPalCheckout.OrderApplicationContext.Usage : Swift.Equatable {}
extension PayPalCheckout.OrderApplicationContext.Usage : Swift.Hashable {}
extension PayPalCheckout.OrderApplicationContext.Usage : Swift.RawRepresentable {}
extension PayPalCheckout.OrderApplicationContext.Network : Swift.Equatable {}
extension PayPalCheckout.OrderApplicationContext.Network : Swift.Hashable {}
extension PayPalCheckout.OrderApplicationContext.Network : Swift.RawRepresentable {}
@available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
extension PayPalCheckout.PayPalCreditButton.Color : Swift.Equatable {}
@available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
extension PayPalCheckout.PayPalCreditButton.Color : Swift.Hashable {}
@available(*, deprecated, message: "Use PaymentButtonContainer() instead.")
extension PayPalCheckout.PayPalCreditButton.Color : Swift.RawRepresentable {}
extension PayPalCheckout.EventType : Swift.Equatable {}
extension PayPalCheckout.EventType : Swift.Hashable {}
extension PayPalCheckout.EventType : Swift.RawRepresentable {}
