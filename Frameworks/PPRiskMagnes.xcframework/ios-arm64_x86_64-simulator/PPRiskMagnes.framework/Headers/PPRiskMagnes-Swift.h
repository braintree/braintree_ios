#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3.2 effective-4.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef PPRISKMAGNES_SWIFT_H
#define PPRISKMAGNES_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PPRiskMagnes",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif









/// MagnesResult is an object holding Magnes Device Info and PayPalClientMetaDataId
SWIFT_CLASS("_TtC12PPRiskMagnes12MagnesResult")
@interface MagnesResult : NSObject
/// Get Magnes Device Info
///
/// returns:
/// [String: Any]
- (NSDictionary<NSString *, id> * _Nonnull)getDeviceInfo SWIFT_WARN_UNUSED_RESULT;
/// Get PayPal’s Client Metadata Id
///
/// returns:
/// String
- (NSString * _Nonnull)getPayPalClientMetaDataId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum Environment : NSInteger;
enum MagnesSource : NSInteger;
@class UITextField;
@class UITouch;
@class UIEvent;

/// Collects risk information
SWIFT_CLASS("_TtC12PPRiskMagnes9MagnesSDK")
@interface MagnesSDK : NSObject
/// AppId error message description
@property (nonatomic, readonly, copy) NSString * _Nonnull appIdErrorMessage;
/// cmid/PayPalClientMetadataId error message description
@property (nonatomic, readonly, copy) NSString * _Nonnull cmidErrorMessage;
/// Get the shared instance of the MagnesSDK singleton
///
/// returns:
/// A shared instance of the MagnesSDK object
+ (MagnesSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Setup Magnes values
/// \param appGuid App Guid of the host app with max length of 36, if available
///
/// \param apnToken Apple Push Notification token of the host app, if available
///
/// \param isRemoteConfigDisabled if loading Magnes remote configuration is going to be disabled
///
/// \param env Magnes running environment
///
/// \param isBeaconDisabled Toggle Beacon settings
///
/// \param source Host app’s source identification
///
///
/// throws:
/// <code>appIdErrorMessage</code> if <code>appGuid</code> string count is more than 36
- (BOOL)setUpWithSetEnviroment:(enum Environment)env setOptionalAppGuid:(NSString * _Nonnull)appGuid setOptionalAPNToken:(NSString * _Nonnull)apnToken disableRemoteConfiguration:(BOOL)isRemoteConfigDisabled disableBeacon:(BOOL)isBeaconDisabled magnesSource:(enum MagnesSource)source error:(NSError * _Nullable * _Nullable)error;
/// Collect Magnes Data
/// This method only collects the data and will not submit it to the risk backend
///
/// returns:
/// MagnesResult
- (MagnesResult * _Nonnull)collect SWIFT_WARN_UNUSED_RESULT;
/// Collect Magnes Data with an existing PayPalClientMetadataId
/// \param cmid existing PayPalClientMetadataId/cmid with max lenght of 32
///
/// \param additionalData additional key value pairs that will be added to the collected data
///
///
/// throws:
/// <code>cmidErrorMessage</code> if <code>cmid</code> length is more than 32
///
/// returns:
/// MagnesResult
- (MagnesResult * _Nullable)collectWithPayPalClientMetadataId:(NSString * _Nonnull)cmid withAdditionalData:(NSDictionary<NSString *, NSString *> * _Nonnull)additionalData error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Collect Magnes data and submit to PayPal Risk
///
/// returns:
/// MagnesResult
- (MagnesResult * _Nonnull)collectAndSubmit SWIFT_WARN_UNUSED_RESULT;
/// Collect Magnes data and submit to PayPal Risk
/// This call will make a non-blocking API call to PayPal
/// A MagnesResult object is returned
/// A PayPalClientMetadataId could be provided
/// Any additional Key Value pairs (in Strings) could be provided
/// \param cmid existing PayPalClientMetadataId/cmid with max length of 32
///
/// \param additionalData additional key value pairs: [String: String]
///
///
/// throws:
/// <code>cmidErrorMessage</code> if <code>cmid</code> length is more than 32
///
/// returns:
/// MagnesResult
- (MagnesResult * _Nullable)collectAndSubmitWithPayPalClientMetadataId:(NSString * _Nonnull)cmid withAdditionalData:(NSDictionary<NSString *, NSString *> * _Nonnull)additionalData error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Registers UITextFields for Telemetry collection
/// \param textField <code>UITextField</code> that is being registered for telemetry
///
/// \param viewId Unique name for the <code>textField</code>, should be unique for each textField
///
/// \param cmid Should pass in the cmid which is returned by/used for the <code>collectAndSubmit</code> call
///
///
/// returns:
/// Void
- (void)registerTelemetryOn:(UITextField * _Nonnull)textField withViewId:(NSString * _Nonnull)viewId withPayPalClientMetadataId:(NSString * _Nonnull)cmid;
/// Removes Telemetry from telemetry collection
/// \param textField <code>UITextField</code> that we want to unregister from telemetry collection
///
- (void)unregisterTelemetryOn:(UITextField * _Nonnull)textField;
/// Collects telemetry information for the registered textField
/// Will be implemented in the <code>ViewController</code> where the following UITextFieldDelegate protocol is implemented:
/// <code>textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool</code>
/// \param textField The text field containing the text
///
/// \param range The range of characters to be replaced
///
/// \param replacementString The replacement string for the specified range
///
- (void)collectTelemetryDataWithTextField:(UITextField * _Nonnull)textField range:(NSRange)range replacementString:(NSString * _Nonnull)replacementString;
/// Collects touch data for Magnes
/// Will be implemented in the <code>ViewController</code> where the Touch Data is to be collected
/// Function invoked in following 3 functions:
/// <code>touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?)</code>
/// <code>touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?)</code>
/// <code>touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?)</code>
/// \param touches A set of UITouch instances that represent the touches for the particular phase of the event, which is represented by event
///
/// \param event The event to which the touches belong
///
/// \param phase The phase of a touch event
///
/// \param cmid Should pass in the cmid which is returned by/used for the <code>collectAndSubmit</code> call
///
- (void)collectTouchData:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event forTouchPhase:(enum UITouchPhase)phase withPayPalClientMetadataId:(NSString * _Nonnull)cmid;
@end

/// Host app’s source identification
typedef SWIFT_ENUM(NSInteger, MagnesSource, open) {
  MagnesSourcePAYPAL = 10,
  MagnesSourceEBAY = 11,
  MagnesSourceBRAINTREE = 12,
  MagnesSourceSIMILITY = 17,
  MagnesSourceVENMO = 18,
  MagnesSourceDEFAULT = 19,
};

/// Magnes’ running environment
typedef SWIFT_ENUM(NSInteger, Environment, open) {
  EnvironmentLIVE = 0,
  EnvironmentSANDBOX = 1,
  EnvironmentSTAGE = 2,
};

/// Possible Magnes Errors
typedef SWIFT_ENUM(NSInteger, MagnesErrors, open) {
  MagnesErrorsInvalidInputError = 100,
};
static NSString * _Nonnull const MagnesErrorsDomain = @"PPRiskMagnes.MagnesSDK.MagnesErrors";


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.3.2 effective-4.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef PPRISKMAGNES_SWIFT_H
#define PPRISKMAGNES_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PPRiskMagnes",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif









/// MagnesResult is an object holding Magnes Device Info and PayPalClientMetaDataId
SWIFT_CLASS("_TtC12PPRiskMagnes12MagnesResult")
@interface MagnesResult : NSObject
/// Get Magnes Device Info
///
/// returns:
/// [String: Any]
- (NSDictionary<NSString *, id> * _Nonnull)getDeviceInfo SWIFT_WARN_UNUSED_RESULT;
/// Get PayPal’s Client Metadata Id
///
/// returns:
/// String
- (NSString * _Nonnull)getPayPalClientMetaDataId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum Environment : NSInteger;
enum MagnesSource : NSInteger;
@class UITextField;
@class UITouch;
@class UIEvent;

/// Collects risk information
SWIFT_CLASS("_TtC12PPRiskMagnes9MagnesSDK")
@interface MagnesSDK : NSObject
/// AppId error message description
@property (nonatomic, readonly, copy) NSString * _Nonnull appIdErrorMessage;
/// cmid/PayPalClientMetadataId error message description
@property (nonatomic, readonly, copy) NSString * _Nonnull cmidErrorMessage;
/// Get the shared instance of the MagnesSDK singleton
///
/// returns:
/// A shared instance of the MagnesSDK object
+ (MagnesSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Setup Magnes values
/// \param appGuid App Guid of the host app with max length of 36, if available
///
/// \param apnToken Apple Push Notification token of the host app, if available
///
/// \param isRemoteConfigDisabled if loading Magnes remote configuration is going to be disabled
///
/// \param env Magnes running environment
///
/// \param isBeaconDisabled Toggle Beacon settings
///
/// \param source Host app’s source identification
///
///
/// throws:
/// <code>appIdErrorMessage</code> if <code>appGuid</code> string count is more than 36
- (BOOL)setUpWithSetEnviroment:(enum Environment)env setOptionalAppGuid:(NSString * _Nonnull)appGuid setOptionalAPNToken:(NSString * _Nonnull)apnToken disableRemoteConfiguration:(BOOL)isRemoteConfigDisabled disableBeacon:(BOOL)isBeaconDisabled magnesSource:(enum MagnesSource)source error:(NSError * _Nullable * _Nullable)error;
/// Collect Magnes Data
/// This method only collects the data and will not submit it to the risk backend
///
/// returns:
/// MagnesResult
- (MagnesResult * _Nonnull)collect SWIFT_WARN_UNUSED_RESULT;
/// Collect Magnes Data with an existing PayPalClientMetadataId
/// \param cmid existing PayPalClientMetadataId/cmid with max lenght of 32
///
/// \param additionalData additional key value pairs that will be added to the collected data
///
///
/// throws:
/// <code>cmidErrorMessage</code> if <code>cmid</code> length is more than 32
///
/// returns:
/// MagnesResult
- (MagnesResult * _Nullable)collectWithPayPalClientMetadataId:(NSString * _Nonnull)cmid withAdditionalData:(NSDictionary<NSString *, NSString *> * _Nonnull)additionalData error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Collect Magnes data and submit to PayPal Risk
///
/// returns:
/// MagnesResult
- (MagnesResult * _Nonnull)collectAndSubmit SWIFT_WARN_UNUSED_RESULT;
/// Collect Magnes data and submit to PayPal Risk
/// This call will make a non-blocking API call to PayPal
/// A MagnesResult object is returned
/// A PayPalClientMetadataId could be provided
/// Any additional Key Value pairs (in Strings) could be provided
/// \param cmid existing PayPalClientMetadataId/cmid with max length of 32
///
/// \param additionalData additional key value pairs: [String: String]
///
///
/// throws:
/// <code>cmidErrorMessage</code> if <code>cmid</code> length is more than 32
///
/// returns:
/// MagnesResult
- (MagnesResult * _Nullable)collectAndSubmitWithPayPalClientMetadataId:(NSString * _Nonnull)cmid withAdditionalData:(NSDictionary<NSString *, NSString *> * _Nonnull)additionalData error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Registers UITextFields for Telemetry collection
/// \param textField <code>UITextField</code> that is being registered for telemetry
///
/// \param viewId Unique name for the <code>textField</code>, should be unique for each textField
///
/// \param cmid Should pass in the cmid which is returned by/used for the <code>collectAndSubmit</code> call
///
///
/// returns:
/// Void
- (void)registerTelemetryOn:(UITextField * _Nonnull)textField withViewId:(NSString * _Nonnull)viewId withPayPalClientMetadataId:(NSString * _Nonnull)cmid;
/// Removes Telemetry from telemetry collection
/// \param textField <code>UITextField</code> that we want to unregister from telemetry collection
///
- (void)unregisterTelemetryOn:(UITextField * _Nonnull)textField;
/// Collects telemetry information for the registered textField
/// Will be implemented in the <code>ViewController</code> where the following UITextFieldDelegate protocol is implemented:
/// <code>textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool</code>
/// \param textField The text field containing the text
///
/// \param range The range of characters to be replaced
///
/// \param replacementString The replacement string for the specified range
///
- (void)collectTelemetryDataWithTextField:(UITextField * _Nonnull)textField range:(NSRange)range replacementString:(NSString * _Nonnull)replacementString;
/// Collects touch data for Magnes
/// Will be implemented in the <code>ViewController</code> where the Touch Data is to be collected
/// Function invoked in following 3 functions:
/// <code>touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?)</code>
/// <code>touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?)</code>
/// <code>touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?)</code>
/// \param touches A set of UITouch instances that represent the touches for the particular phase of the event, which is represented by event
///
/// \param event The event to which the touches belong
///
/// \param phase The phase of a touch event
///
/// \param cmid Should pass in the cmid which is returned by/used for the <code>collectAndSubmit</code> call
///
- (void)collectTouchData:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event forTouchPhase:(enum UITouchPhase)phase withPayPalClientMetadataId:(NSString * _Nonnull)cmid;
@end

/// Host app’s source identification
typedef SWIFT_ENUM(NSInteger, MagnesSource, open) {
  MagnesSourcePAYPAL = 10,
  MagnesSourceEBAY = 11,
  MagnesSourceBRAINTREE = 12,
  MagnesSourceSIMILITY = 17,
  MagnesSourceVENMO = 18,
  MagnesSourceDEFAULT = 19,
};

/// Magnes’ running environment
typedef SWIFT_ENUM(NSInteger, Environment, open) {
  EnvironmentLIVE = 0,
  EnvironmentSANDBOX = 1,
  EnvironmentSTAGE = 2,
};

/// Possible Magnes Errors
typedef SWIFT_ENUM(NSInteger, MagnesErrors, open) {
  MagnesErrorsInvalidInputError = 100,
};
static NSString * _Nonnull const MagnesErrorsDomain = @"PPRiskMagnes.MagnesSDK.MagnesErrors";


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
