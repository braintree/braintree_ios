name: Tests
on: [pull_request]
concurrency:
  group: tests-${{ github.event.number }}
  cancel-in-progress: true
jobs:
  unit_test_job:
    name: Unit
    runs-on: macos-15-xlarge
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: Use Xcode 16.4
        run: sudo xcode-select -switch /Applications/Xcode_16.4.0.app
      - name: Install Package dependencies
        run: swift package resolve
      - name: Install CocoaPod dependencies
        run: pod install
      - name: Run Unit Tests
        run: set -o pipefail && xcodebuild -workspace 'Braintree.xcworkspace' -sdk 'iphonesimulator' -configuration 'Debug' -scheme 'UnitTests' -destination 'name=iPhone 16 Pro,OS=18.5,platform=iOS Simulator'  test | ./Pods/xcbeautify/xcbeautify
  threeds_ui_test_job:
    name: UI Tests - ThreeDSecure
    runs-on: macos-15-xlarge
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Use Xcode 16.4
        run: sudo xcode-select -switch /Applications/Xcode_16.4.0.app

      - name: Install CocoaPod dependencies
        run: pod install

      - name: Run ThreeDSecure UI Tests
        run: |
          set -o pipefail
          xcodebuild \
            -workspace 'Braintree.xcworkspace' \
            -sdk 'iphonesimulator' \
            -configuration 'Release' \
            -scheme 'UITests' \
            -destination 'name=iPhone 16 Pro,OS=18.5,platform=iOS Simulator' \
            -only-testing:UITests/ThreeDSecure_V2_UITests \
            test | ./Pods/xcbeautify/xcbeautify

  paypal_ui_test_job:
    name: UI Tests - PayPal
    runs-on: macos-15-xlarge
    timeout-minutes: 30
    strategy:
      matrix:
        include:
          - test-suite: PayPal_Checkout_UITests
            simulator-name: iPhone 16 Pro PayPalCheckout
          - test-suite: PayPal_Vault_UITests
            simulator-name: iPhone 16 Pro PayPalVault
      max-parallel: 1  # ASWebAuthenticationSession can only run one at a time
      fail-fast: false  # Continue running other test suites if one fails
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Use Xcode 16.4
        run: sudo xcode-select -switch /Applications/Xcode_16.4.0.app

      - name: Install CocoaPod dependencies
        run: pod install

      - name: Create and Boot Simulator - ${{ matrix.simulator-name }}
        timeout-minutes: 3
        run: |
          # Create a unique simulator for this matrix job to enable parallel execution
          echo "Creating simulator: ${{ matrix.simulator-name }}"

          # Shutdown and erase ALL simulators to ensure completely clean state
          # This clears global ASWebAuthenticationSession state
          echo "Cleaning all simulators..."
          xcrun simctl shutdown all 2>/dev/null || true
          xcrun simctl erase all 2>/dev/null || true

          # Find iOS 18.5 runtime identifier
          RUNTIME_ID=$(xcrun simctl list runtimes | grep "iOS 18.5" | head -n 1 | grep -oE 'com\.apple\.CoreSimulator\.SimRuntime\.[^)]+')

          if [ -z "$RUNTIME_ID" ]; then
            echo "::error::iOS 18.5 runtime not found"
            xcrun simctl list runtimes
            exit 1
          fi

          echo "Using runtime: $RUNTIME_ID"

          # Create new simulator with iPhone 16 Pro device type and iOS 18.5 runtime
          DEVICE_UDID=$(xcrun simctl create "${{ matrix.simulator-name }}" "com.apple.CoreSimulator.SimDeviceType.iPhone-16-Pro" "$RUNTIME_ID")

          echo "Created simulator with UDID: $DEVICE_UDID"
          echo "SIMULATOR_UDID=$DEVICE_UDID" >> $GITHUB_ENV

          # Disable hardware keyboard to avoid input issues
          defaults write com.apple.iphonesimulator ConnectHardwareKeyboard -bool false

          # Boot simulator
          echo "Booting simulator..."
          xcrun simctl boot "$DEVICE_UDID"

          # Wait for simulator to fully boot
          echo "Waiting for simulator to boot..."
          for i in {1..30}; do
            if xcrun simctl bootstatus "$DEVICE_UDID" 2>&1 | grep -q "Boot status: 2"; then
              echo "Simulator booted successfully"
              break
            fi
            sleep 2
          done

          # Give simulator additional time to settle
          sleep 5

      - name: Build for Testing - ${{ matrix.test-suite }}
        run: |
          set -o pipefail
          xcodebuild \
            -workspace 'Braintree.xcworkspace' \
            -sdk 'iphonesimulator' \
            -configuration 'Release' \
            -scheme 'UITests' \
            -destination "platform=iOS Simulator,id=${{ env.SIMULATOR_UDID }}" \
            -derivedDataPath './DerivedData' \
            build-for-testing | ./Pods/xcbeautify/xcbeautify

      - name: Run UI Tests - ${{ matrix.test-suite }}
        id: test_attempt_1
        continue-on-error: true
        run: |
          set -o pipefail
          xcodebuild \
            -workspace 'Braintree.xcworkspace' \
            -sdk 'iphonesimulator' \
            -configuration 'Release' \
            -scheme 'UITests' \
            -destination "platform=iOS Simulator,id=${{ env.SIMULATOR_UDID }}" \
            -derivedDataPath './DerivedData' \
            -only-testing:UITests/${{ matrix.test-suite }} \
            test-without-building | ./Pods/xcbeautify/xcbeautify

      - name: Retry UI Tests (if failed) - ${{ matrix.test-suite }}
        if: steps.test_attempt_1.outcome == 'failure'
        id: test_attempt_2
        continue-on-error: true
        timeout-minutes: 15
        run: |
          echo "First attempt failed, retrying..."
          set -o pipefail
          xcodebuild \
            -workspace 'Braintree.xcworkspace' \
            -sdk 'iphonesimulator' \
            -configuration 'Release' \
            -scheme 'UITests' \
            -destination "platform=iOS Simulator,id=${{ env.SIMULATOR_UDID }}" \
            -derivedDataPath './DerivedData' \
            -only-testing:UITests/${{ matrix.test-suite }} \
            test-without-building | ./Pods/xcbeautify/xcbeautify

      - name: Final UI Test Result - ${{ matrix.test-suite }}
        if: steps.test_attempt_1.outcome == 'failure'
        run: |
          if [ "${{ steps.test_attempt_2.outcome }}" == "failure" ]; then
            echo "UI Tests failed after retry"
            exit 1
          else
            echo "UI Tests passed on retry"
          fi

      - name: Cleanup Simulator
        if: always()
        run: |
          # Delete the simulator to free up resources
          echo "Cleaning up simulator: ${{ matrix.simulator-name }}"
          xcrun simctl delete "${{ matrix.simulator-name }}" 2>/dev/null || true

  venmo_ui_test_job:
    name: UI Tests - Venmo
    runs-on: macos-15-xlarge
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Use Xcode 16.4
        run: sudo xcode-select -switch /Applications/Xcode_16.4.0.app

      - name: Install CocoaPod dependencies
        run: pod install

      - name: Run Venmo UI Tests
        id: venmo_attempt_1
        continue-on-error: true
        run: |
          set -o pipefail
          xcodebuild \
            -workspace 'Braintree.xcworkspace' \
            -sdk 'iphonesimulator' \
            -configuration 'Release' \
            -scheme 'UITests' \
            -destination 'name=iPhone 16 Pro,OS=18.5,platform=iOS Simulator' \
            -only-testing:UITests/Venmo_UITests \
            test | ./Pods/xcbeautify/xcbeautify

      - name: Retry Venmo UI Tests (if failed)
        if: steps.venmo_attempt_1.outcome == 'failure'
        id: venmo_attempt_2
        continue-on-error: true
        run: |
          echo "First attempt failed, retrying..."
          set -o pipefail
          xcodebuild \
            -workspace 'Braintree.xcworkspace' \
            -sdk 'iphonesimulator' \
            -configuration 'Release' \
            -scheme 'UITests' \
            -destination 'name=iPhone 16 Pro,OS=18.5,platform=iOS Simulator' \
            -only-testing:UITests/Venmo_UITests \
            test | ./Pods/xcbeautify/xcbeautify

      - name: Final Venmo Test Result
        if: steps.venmo_attempt_1.outcome == 'failure'
        run: |
          if [ "${{ steps.venmo_attempt_2.outcome }}" == "failure" ]; then
            echo "Venmo UI Tests failed after retry"
            exit 1
          else
            echo "Venmo UI Tests passed on retry"
          fi

  integration_test_job:
    name: Integration
    runs-on: macos-15-xlarge
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: Use Xcode 16.4
        run: sudo xcode-select -switch /Applications/Xcode_16.4.0.app
      - name: Install Package dependencies
        run: swift package resolve
      - name: Install CocoaPod dependencies
        run: pod install
      - name: Run Integration Tests
        run: set -o pipefail && xcodebuild -workspace 'Braintree.xcworkspace' -sdk 'iphonesimulator' -configuration 'Release' -scheme 'IntegrationTests' -destination 'name=iPhone 16 Pro,OS=18.5,platform=iOS Simulator'  test | ./Pods/xcbeautify/xcbeautify
